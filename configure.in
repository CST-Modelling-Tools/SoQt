# **************************************************************************
# SoQt/configure.in

# any source file in the project
AC_INIT(src/Inventor/Qt/SoQt.h)

sim_ac_cvs_syncproblem=false;
sim_ac_examples_check_file=${srcdir}/examples/configure.in

if test ! -f $sim_ac_examples_check_file; then
  if test "x${with_auto_cvs_update+set}" = "xset"; then
    echo "Trying to honour the --with-auto-cvs-update option."
    sim_ac_save_cwd="`pwd`"
    cd ${srcdir}
    if test ! -d ./examples -o ! -f ./CVS/Entries; then
      AC_MSG_ERROR(
        [something failed horribly - can't do --with-auto-cvs-update])
    fi
    grep -v "^D/examples/" CVS/Entries > /tmp/SoQt-CVS-Entries.$$
    cp /tmp/SoQt-CVS-Entries.$$ CVS/Entries
    rm /tmp/SoQt-CVS-Entries.$$
    rm -rf examples
    cvs co SoQtExamples
    cd ${sim_ac_save_cwd}
    echo "Done.  Proceeding..."
  fi
fi

if test ! -f $sim_ac_examples_check_file; then
  echo ""
  echo "  You appear to have an old setup of the SoQt source repository."
  echo "  Parts of it have changed structurally, and you need to do the"
  echo "  following in the SoQt source directory:"
  echo ""
  echo "    \$ grep -v "^D/examples/" CVS/Entries > /tmp/SoQt-CVS-Entries"
  echo "    \$ cp /tmp/SoQt-CVS-Entries CVS/Entries"
  echo "    \$ rm /tmp/SoQt-CVS-Entries"
  echo "    \$ rm -rf examples"
  echo "    \$ cvs co SoQtExamples"
  echo ""
  echo "  You can also run configure with the option --with-auto-cvs-update"
  echo "  to allow the configure script to try to take care of this.  This"
  echo "  option is very experimental and should not be used if you run"
  echo "  configure some \"weird\" way."
  echo ""
  sim_ac_cvs_syncproblem=true
fi

if test "x$sim_ac_cvs_syncproblem" = "xtrue"; then
  exit
fi

# Use C++ compiler for configure tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

# **************************************************************************
# Library version control.

#  Making releases:
#    SOQT_MICRO_VERSION += 1;
#    SOQT_INTERFACE_AGE += 1;
#    SOQT_BINARY_AGE += 1;
#  if any functions have been added, set SOQT_INTERFACE_AGE to 0.
#  if backwards compatibility has been broken,
#  set SOQT_BINARY_AGE _and_ SOQT_INTERFACE_AGE to 0.

SOQT_MAJOR_VERSION=0
SOQT_MINOR_VERSION=8
SOQT_MICRO_VERSION=1
SOQT_INTERFACE_AGE=0
SOQT_BINARY_AGE=0
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)
AC_SUBST(SOQT_INTERFACE_AGE)
AC_SUBST(SOQT_BINARY_AGE)

# libtool versioning
LT_RELEASE=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION
LT_CURRENT=`expr $SOQT_MICRO_VERSION - $SOQT_INTERFACE_AGE`
LT_REVISION=$SOQT_INTERFACE_AGE
LT_AGE=`expr $SOQT_BINARY_AGE - $SOQT_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOQT_VERSION

AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION)
AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION)
AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION")

# **************************************************************************
# Miscellaneous options and initializations.

AM_INIT_AUTOMAKE(libSoQt, $VERSION)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Default to not building a static library.
# Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

# Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

# These are used for constructing the soqt-config file.
SOQT_EXTRA_CPPFLAGS=$CPPFLAGS
SOQT_EXTRA_LDFLAGS=$LDFLAGS
SOQT_EXTRA_LIBS=$LIBS
AC_SUBST(SOQT_EXTRA_CPPFLAGS)
AC_SUBST(SOQT_EXTRA_LDFLAGS)
AC_SUBST(SOQT_EXTRA_LIBS)


# Check if linking should be done MSWin-style ("libname.lib") or
# Unix-style ("-llibname").
SIM_AC_CHECK_LINKSTYLE

if test x"$sim_ac_linking_style" = xmswin; then
  SOQT_LIBNAME=soqt.lib
else
  SOQT_LIBNAME=-lSoQt
fi
AC_SUBST(SOQT_LIBNAME)

# **************************************************************************
# Search and set up necessary stuff to use Open Inventor or Coin.

# $with_inventor is from within SIM_CHECK_INVENTOR(), and can be used
# here since the value is empty when it reaches this point unless
# it has been explicitly set.

if test x"$with_inventor" = xyes; then
  # For Open Inventor linkage, we need to check for a shitload of libraries.

  SIM_CHECK_DL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_dl_libs $SOQT_EXTRA_LIBS"
  ])

  SIM_CHECK_X11([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_CHECK_X11SHMEM(SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS")
    SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
  fi

  SIM_AC_CHECK_OPENGL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_gl_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs an OpenGL-compatible development system installation))


  SIM_CHECK_INVENTOR([
    SOQT_EXTRA_CPPFLAGS="$sim_ac_oiv_cppflags $SOQT_EXTRA_CPPFLAGS"
    SOQT_EXTRA_LDFLAGS="$sim_ac_oiv_ldflags $SOQT_EXTRA_LDFLAGS"
    SOQT_EXTRA_LIBS="$sim_ac_oiv_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(couldn't compile and link against Open Inventor))

else

  SIM_CHECK_COIN([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_coin_libs $SOQT_EXTRA_LIBS"
  ],[
    AC_MSG_ERROR(couldn't compile and link against Coin)
  ],[
    default searchprefix
  ])

  SIM_AC_CHECK_X11_READY(
    [sim_ac_x11_ready=true],
    [sim_ac_x11_ready=false])

  if ! $sim_ac_x11_ready; then
    SIM_CHECK_X11([
      SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
      SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
      SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
    ])
    if test x"$sim_ac_x11_avail" = xyes; then
      SIM_CHECK_X11SHMEM(
        [SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS"])
      SIM_CHECK_X11MU(
        [SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS"])
    fi
  fi
  
fi

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.

SIM_HAVE_SOPOLYGONOFFSET

# **************************************************************************
# Check that the Qt installation looks ok and include the
# necessary paths and link libraries.

SIM_CHECK_QT([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qt_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qt_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qt_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against Qt development kit))

if test x"$sim_ac_x11mu_avail" != xyes; then
  SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
fi

SIM_CHECK_QGL([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qgl_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qgl_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qgl_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against the QGL extension library))

SIM_AC_QGLFORMAT_SETOVERLAY
SIM_AC_QGLWIDGET_SETAUTOBUFFERSWAP

# **************************************************************************
# Strip off zlib and libpng from the set of link libraries if they are
# not needed (they might already be linked in implicitly through Qt,
# which will give us trouble with an MSWin soqt.dll).
#
# FIXME: should probably do the same check for libungif and libjpeg aswell?
# 20000616 mortene.

# snipped from SIM_CHECK_ZLIB
if test x"$sim_ac_linking_style" = xmswin; then
  sim_ac_zlib_libs=zlib.lib
else
  sim_ac_zlib_libs=-lz
fi

sim_ac_strip_libs=`echo $LIBS | sed s%\ ${sim_ac_zlib_libs}%%`
if test x"$sim_ac_strip_libs" != x"$LIBS"; then
  SIM_AC_CHECK_ZLIB_READY([
    LIBS=$sim_ac_strip_libs
    SOQT_EXTRA_LIBS=`echo $SOQT_EXTRA_LIBS | sed s%\ ${sim_ac_zlib_libs}%%`
  ])
fi

if test x"$sim_ac_linking_style" = xmswin; then
  sim_ac_pngdev_libs=png.lib
else
  sim_ac_pngdev_libs=-lpng
fi

sim_ac_strip_libs=`echo $LIBS | sed s%\ ${sim_ac_pngdev_libs}%%`
if test x"$sim_ac_strip_libs" != x"$LIBS"; then
  SIM_AC_CHECK_PNG_READY([
    LIBS=$sim_ac_strip_libs
    SOQT_EXTRA_LIBS=`echo $SOQT_EXTRA_LIBS | sed s%\ ${sim_ac_pngdev_libs}%%`
  ])
fi



# **************************************************************************
# Compiler control.

SIM_COMPILE_DEBUG
if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=0"
fi

SIM_AC_CHECK_VAR_FUNCTIONNAME

SIM_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# do we want to compile the example programs?

# undocumented option --with-test-code
AM_CONDITIONAL(BUILD_TESTS, test x"${with_test_code+set}" = "xset")

AC_ARG_WITH(examples,
  AC_HELP_STRING([--with-examples], [build example programs [default=yes]]),
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-examples) ;;
  esac],
  [want_examples=yes])

sim_ac_ivexamples_available=no
if test -f ${srcdir}/ivexamples/configure.in; then
  sim_ac_ivexamples_available=yes
fi

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)
AM_CONDITIONAL(BUILD_IV_EXAMPLES, test x"$sim_ac_ivexamples_available" = xyes)

# **************************************************************************
# Variable substitutions for using libSoQt in the generic code.

. ${srcdir}/libconfigvars.sh

AC_SUBST(GUI)
AC_SUBST(lGUI)
AC_SUBST(uGUI)
AC_SUBST(WIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

# **************************************************************************
# Configure the submodule with the examples.

sim_ac_subconfig=examples
if test x"$sim_ac_ivexamples_available" = xyes; then
  sim_ac_subconfig="$sim_ac_subconfig ivexamples"
fi
AC_CONFIG_SUBDIRS($sim_ac_subconfig)

# **************************************************************************
# Misc set-up.

SIM_EXPAND_DIR_VARS

dnl * automake bugfix
test -d src              || mkdir src
test -d src/Inventor     || mkdir src/Inventor
test -d src/Inventor/Qt  || mkdir src/Inventor/Qt

# Set soqt_build_dir so we can change soqt.dsp
soqt_current_dir=`pwd`
SIM_AC_DOBACKSLASH(soqt_build_dir,$soqt_current_dir)
AC_SUBST(soqt_build_dir)

# Set soqt_src_dir so we can change soqt.dsp
SIM_AC_DOBACKSLASH(soqt_src_dir,$srcdir)
AC_SUBST(soqt_src_dir)

# Set soqt_include_dir so we can change CoinSDK_SoQt.iwz
SIM_AC_DOBACKSLASH(soqt_include_dir,$includedir)
AC_SUBST(soqt_include_dir)

# Set soqt_lib_dir so we can change CoinSDK_SoQt.iwz
SIM_AC_DOBACKSLASH(soqt_lib_dir,$libdir)
AC_SUBST(soqt_lib_dir)

# **************************************************************************
# List all files configure shall automatically generate.

AC_OUTPUT([
	soqt-config
	Makefile
	src/Inventor/Qt/Makefile
	src/Inventor/Qt/devices/Makefile
	src/Inventor/Qt/viewers/Makefile
	src/Inventor/Qt/widgets/Makefile
	test-code/Makefile
	test-code/components/Makefile
	test-code/widgets/Makefile
        build/soqt.dsp
        build/soqt.mak
        build/soqt_dll.dsp
        build/soqt_dll.mak
	build/CoinSDK_SoQt.iwz.in
],[
	chmod a+x soqt-config
])

# **************************************************************************
# do some extra stuff for Windows system

pf="build/soqt";
sim_ac_winfiles="${pf}.dsp ${pf}.mak ${pf}_dll.dsp ${pf}_dll.mak"
sim_ac_winfiles="${sim_ac_winfiles} build/CoinSDK_SoQt.iwz.in";

if test x"$sim_ac_linking_style" = xmswin; then
  for sim_ac_winfile in $sim_ac_winfiles; do
    mv $sim_ac_winfile $sim_ac_winfile.bak
    echo "(Win)DOS-ifying $sim_ac_winfile"
    sed -e 's/$/
/' < $sim_ac_winfile.bak > $sim_ac_winfile
    rm $sim_ac_winfile.bak
  done
  sed -e 's/$/
/' < ${srcdir}/LICENSE.QPL > build/qpl.txt
  sed -e 's/$/
/' < ${srcdir}/info.cvs > build/info.txt
fi

if test x"$sim_ac_linking_style" = xmswin; then
  echo ""
  echo "If this is your first time building SoQt, please read 'README.WIN'"
  echo "for a step-by-step guide to building SoQt with MSVC++."
  echo ""
else
  echo ""
  echo "Now, run 'make install' to build and install SoQt..."
  echo ""
fi

# **************************************************************************
