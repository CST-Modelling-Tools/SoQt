# **************************************************************************
# SoQt/configure.in

AC_INIT(src/Inventor/Qt/SoQt.h)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
sim_ac_cvs_syncproblem=false;

if test -d $srcdir/cfg/m4; then
  :
else
  cat <<EOT

There has been changes in the SoQt CVS repository structure, and your
source repository is out of sync.  Do the following in the source directory:

  rm -rf conf-macros  (if exists)
  cvs co SoQtMacros

EOT
  sim_ac_cvs_syncproblem=true;
fi

$sim_ac_cvs_syncproblem && echo "" && exit

# **************************************************************************
# Use C++ compiler for configure tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

# **************************************************************************
# Library version control.

#  Making releases:
#    SOQT_MICRO_VERSION += 1;
#    SOQT_INTERFACE_AGE += 1;
#    SOQT_BINARY_AGE += 1;
#  if any functions have been added, set SOQT_INTERFACE_AGE to 0.
#  if backwards compatibility has been broken,
#  set SOQT_BINARY_AGE _and_ SOQT_INTERFACE_AGE to 0.

SOQT_MAJOR_VERSION=0
SOQT_MINOR_VERSION=8
SOQT_MICRO_VERSION=1
SOQT_INTERFACE_AGE=0
SOQT_BINARY_AGE=0
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)
AC_SUBST(SOQT_INTERFACE_AGE)
AC_SUBST(SOQT_BINARY_AGE)

# libtool versioning
LT_RELEASE=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION
LT_CURRENT=`expr $SOQT_MICRO_VERSION - $SOQT_INTERFACE_AGE`
LT_REVISION=$SOQT_INTERFACE_AGE
LT_AGE=`expr $SOQT_BINARY_AGE - $SOQT_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOQT_VERSION

AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION,
  [Define to the major version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION,
  [Define to the minor version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION,
  [Define to the micro version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION",
  [Version string for SoQt])

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libSoQt, $VERSION)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Default to not building a static library.
# Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

# Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

# These are used for constructing the soqt-config file.
SOQT_EXTRA_CPPFLAGS=$CPPFLAGS
SOQT_EXTRA_LDFLAGS=$LDFLAGS
SOQT_EXTRA_LIBS=$LIBS
AC_SUBST(SOQT_EXTRA_CPPFLAGS)
AC_SUBST(SOQT_EXTRA_LDFLAGS)
AC_SUBST(SOQT_EXTRA_LIBS)


# Check if linking should be done MSWin-style ("libname.lib") or
# Unix-style ("-llibname").
SIM_AC_CHECK_LINKSTYLE

if test x"$sim_ac_linking_style" = xmswin; then
  SOQT_LIBNAME="soqt${SOQT_VERSION}.lib"
else
  SOQT_LIBNAME=-lSoQt
fi
AC_SUBST(SOQT_LIBNAME)

# **************************************************************************
# Search and set up necessary stuff to use Open Inventor or Coin.

# $with_inventor is from within SIM_CHECK_INVENTOR(), and can be used
# here since the value is empty when it reaches this point unless
# it has been explicitly set.

if test x"$with_inventor" = xyes; then
  # For Open Inventor linkage, we need to check for a shitload of libraries.

  SIM_AC_CHECK_DL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_dl_libs $SOQT_EXTRA_LIBS"
  ])

  SIM_CHECK_X11([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_CHECK_X11SHMEM(SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS")
    SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
  fi

  SIM_AC_CHECK_OPENGL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_gl_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs an OpenGL-compatible development system installation))

  SIM_AC_CHECK_GLU([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_glu_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs the OpenGL utility library))

  SIM_CHECK_INVENTOR([
    SOQT_EXTRA_CPPFLAGS="$sim_ac_oiv_cppflags $SOQT_EXTRA_CPPFLAGS"
    SOQT_EXTRA_LDFLAGS="$sim_ac_oiv_ldflags $SOQT_EXTRA_LDFLAGS"
    SOQT_EXTRA_LIBS="$sim_ac_oiv_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(couldn't compile and link against Open Inventor))

else

  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_coin_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(couldn't compile and link against Coin))

  coin_version=$sim_ac_coin_version
  AC_SUBST(coin_version)

  SIM_AC_CHECK_X11_READY(
    [sim_ac_x11_ready=true],
    [sim_ac_x11_ready=false])

  if ! $sim_ac_x11_ready; then
    SIM_CHECK_X11([
      CPPFLAGS="$CPPFLAGS $sim_ac_x11_cppflags"
      LDFLAGS="$LDFLAGS $sim_ac_x11_ldflags"
      LIBS="$sim_ac_x11_libs $LIBS"
      SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
      SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
      SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
    ])
    if test x"$sim_ac_x11_avail" = xyes; then
      SIM_CHECK_X11SHMEM([
        # LIBS="$sim_ac_x11shmem_libs $LIBS"
        SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS"
      ])
      SIM_CHECK_X11MU([
        # LIBS="$sim_ac_x11mu_libs $LIBS"
        SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS"
      ])
    fi
  fi
fi

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.

SIM_AC_HAVE_SOPOLYGONOFFSET
SIM_AC_HAVE_SOMOUSEBUTTONEVENT_BUTTONS

# **************************************************************************
# Check that the Qt installation looks ok and include the
# necessary paths and link libraries.

SIM_AC_CHECK_QT([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qt_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qt_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qt_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against Qt development kit))

AC_SUBST(qt_version)

if test x"$sim_ac_x11mu_avail" != xyes; then
  SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
fi

SIM_AC_CHECK_QGL([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qgl_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qgl_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qgl_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against the QGL extension library))

SIM_AC_QGLFORMAT_SETOVERLAY
SIM_AC_QGLWIDGET_SETAUTOBUFFERSWAP

# **************************************************************************
# Spaceball support through Linux Joystick driver

SIM_AC_CHECK_JOYSTICK_LINUX([
  AC_DEFINE(HAVE_JOYSTICK_LINUX, ,
    [Define to enable Linux Joystick driver support])
  AC_DEFINE_UNQUOTED(SOXT_LINUX_JOYSTICK_DEVICE,
    "$sim_ac_joystick_linux_device",
    [Define this to device handle to fallback on])
])
AM_CONDITIONAL(HAVE_JOYSTICK_LINUX, $sim_ac_joystick_linux_avail)

# **************************************************************************
# Strip off zlib and libpng from the set of link libraries if they are
# not needed (they might already be linked in implicitly through Qt,
# which will give us trouble with an MSWin soqt.dll).
#
# FIXME: should probably do the same check for libungif and libjpeg aswell?
# 20000616 mortene.

# snipped from SIM_CHECK_ZLIB
if test x"$sim_ac_linking_style" = xmswin; then
  sim_ac_zlib_libs=zlib.lib
else
  sim_ac_zlib_libs=-lz
fi

sim_ac_strip_libs=`echo $LIBS | sed s%\ ${sim_ac_zlib_libs}%%`
if test x"$sim_ac_strip_libs" != x"$LIBS"; then
  SIM_AC_CHECK_ZLIB_READY([
    LIBS=$sim_ac_strip_libs
    SOQT_EXTRA_LIBS=`echo $SOQT_EXTRA_LIBS | sed s%\ ${sim_ac_zlib_libs}%%`
  ])
fi

if test x"$sim_ac_linking_style" = xmswin; then
  sim_ac_pngdev_libs=png.lib
else
  sim_ac_pngdev_libs=-lpng
fi

sim_ac_strip_libs=`echo $LIBS | sed s%\ ${sim_ac_pngdev_libs}%%`
if test x"$sim_ac_strip_libs" != x"$LIBS"; then
  SIM_AC_CHECK_PNG_READY([
    LIBS=$sim_ac_strip_libs
    SOQT_EXTRA_LIBS=`echo $SOQT_EXTRA_LIBS | sed s%\ ${sim_ac_pngdev_libs}%%`
  ])
fi

# **************************************************************************
# Compiler control.

SIM_COMPILE_DEBUG
if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=0"
fi

SIM_AC_CHECK_VAR_FUNCTIONNAME

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# do we want to compile the example programs?

# undocumented option --with-test-code
AM_CONDITIONAL(BUILD_TESTS, test x"${with_test_code+set}" = "xset")

AC_ARG_WITH(examples,
  AC_HELP_STRING([--with-examples], [build example programs [default=yes]]),
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-examples) ;;
  esac],
  [want_examples=yes])

sim_ac_ivexamples_available=no
if test -f ${srcdir}/ivexamples/configure.in; then
  sim_ac_ivexamples_available=yes
fi

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)
AM_CONDITIONAL(BUILD_IV_EXAMPLES, test x"$sim_ac_ivexamples_available" = xyes)

# **************************************************************************
# Variable substitutions for using libSoQt in the generic code.

GUI=QT
Gui=Qt
gui=qt
WIDGET="QWidget *"
EVENT="QEvent *"
COMPONENTHEADER="Q_OBJECT"

AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(GUI)
AC_SUBST(WIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

# **************************************************************************
# Section for Doxygen

AC_ARG_WITH(
  html,
  AC_HELP_STRING([--with-html], [build and install SoQt HTML documentation]),
  [case "${withval}" in
    yes) want_html=yes ;;
    no)  want_html=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-html) ;;
  esac],
  [want_html=no])

AC_ARG_WITH(
  man,
  AC_HELP_STRING([--with-man], [build and install SoQt man pages]),
  [case "${withval}" in
    yes) want_man=yes ;;
    no)  want_man=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-man) ;;
  esac],
  [want_man=no])

SOQT_DOC_HTML=`echo $want_html | tr a-z A-Z`
SOQT_DOC_MAN=`echo $want_man | tr a-z A-Z`
AC_SUBST(SOQT_DOC_HTML)
AC_SUBST(SOQT_DOC_MAN)

soqt_build_dir=`pwd`
cd $srcdir
soqt_src_dir=`pwd`
cd $soqt_build_dir
soqt_data_dir=/usr/local/share/Coin
test x"$exec_prefix" != xNONE && soqt_data_dir=$exec_prefix/share/Coin

AC_SUBST(soqt_src_dir)
AC_SUBST(soqt_build_dir)
AC_SUBST(soqt_data_dir)

soqt_dox_build_dir=`pwd`
cd $srcdir
soqt_dox_src_dir=`pwd`
cd $soqt_dox_build_dir

AC_SUBST(soqt_dox_src_dir)
AC_SUBST(soqt_dox_build_dir)

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL(,
    AC_MSG_ERROR(Could not find the doxygen tool -- see http://www.stack.nl/~d
imitri/doxygen/))
  sim_ac_doxygen_our_version=1.1.5
  if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
    AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
  AC_SUBST(sim_ac_perl_exe)
fi

# **************************************************************************
# Configure the submodule with the examples.

# if test x"$sim_ac_ivexamples_available" = xyes; then
#   AC_CONFIG_SUBDIRS(ivexamples)
# fi

# **************************************************************************
# Misc set-up.

SIM_EXPAND_DIR_VARS

# Set soqt_build_dir so we can change soqt.dsp
soqt_current_dir=`pwd`
SIM_AC_DOBACKSLASH(soqt_build_dir,$soqt_current_dir)
AC_SUBST(soqt_build_dir)

# Set soqt_src_dir so we can change soqt.dsp
SIM_AC_DOBACKSLASH(soqt_src_dir,$srcdir)
AC_SUBST(soqt_src_dir)

# Set soqt_include_dir so we can change SoCoinSDK.iwz
SIM_AC_DOBACKSLASH(soqt_include_dir,$includedir)
AC_SUBST(soqt_include_dir)

# Set soqt_lib_dir so we can change SoCoinSDK.iwz
SIM_AC_DOBACKSLASH(soqt_lib_dir,$libdir)
AC_SUBST(soqt_lib_dir)

# For the soqt.spec RPM specification file.
SIM_AC_ISO8601_DATE(soqt_configure_date)
AC_SUBST(soqt_configure_date)

# **************************************************************************
# Remove redundant options from certain option lists.
# We add the first argument ourselves to shift it off because it's added
# again inside soqt-config.in

SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_CPPFLAGS, -I$includedir $SOQT_EXTRA_CPPFLAGS)
set : $SOQT_EXTRA_CPPFLAGS
shift
shift
SOQT_EXTRA_CPPFLAGS=$@

SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_LDFLAGS, -L$libdir $SOQT_EXTRA_LDFLAGS)
set : $SOQT_EXTRA_LDFLAGS
shift
shift
SOQT_EXTRA_LDFLAGS=$@

SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_LIBS, $SOQT_LIBNAME $SOQT_EXTRA_LIBS)
set : $SOQT_EXTRA_LIBS
shift
shift
SOQT_EXTRA_LIBS=$@

# We don't have to do shift magic on these:
SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# **************************************************************************
# List all files configure shall automatically generate.

AC_OUTPUT([
	soqt-config
	Makefile
	src/Inventor/Qt/Makefile
	src/Inventor/Qt/devices/Makefile
	src/Inventor/Qt/viewers/Makefile
	src/Inventor/Qt/widgets/Makefile
	test-code/Makefile
	test-code/components/Makefile
	test-code/widgets/Makefile
	build/soqt.doxygen
        build/soqt.dsp
        build/soqt.mak
        build/soqt_dll.dsp
        build/soqt_dll.mak
        build/soqt.spec
],[
	chmod a+x soqt-config
])

# **************************************************************************
# do some extra stuff for Windows system

if test x"$sim_ac_linking_style" = xmswin; then
  # Set so_build_dir so we can change SoCoinSDK.iwz
  SIM_AC_DODOUBLEBACKSLASH(so_build_dir,$soqt_current_dir)
  # Set so_src_dir so we can change SoCoinSDK.iwz
  SIM_AC_DODOUBLEBACKSLASH(so_src_dir,$srcdir)
  # Set so_include_dir so we can change SoCoinSDK.iwz
  SIM_AC_DODOUBLEBACKSLASH(so_include_dir,$includedir)
  # Set so_lib_dir so we can change SoCoinSDK.iwz
  SIM_AC_DODOUBLEBACKSLASH(so_lib_dir,$libdir)
  # Set so_name_hi so we can change SoCoinSDK.iwz
  so_name_hi="Qt"
  # Set so_name_lo so we can change SoCoinSDK.iwz
  so_name_lo="qt"
  # Set so_version so we can change SoCoinSDK.iwz
  so_version="$SOQT_VERSION"
  # Get path to SoCoinSDK.iwz
  coin_data_dir=`coin-config --datadir`
  # Do our own substitutions, as AC_OUTPUT only works for
  # files present under the srcdir of SoQt.
  cat $coin_data_dir/Coin/build/SoCoinSDK.iwz.in | sed -e s%@so_name_hi@%$so_name_hi%g -e s%@so_name_lo@%$so_name_lo%g -e s%@so_build_dir@%$so_build_dir%g -e s%@so_src_dir@%$so_src_dir%g -e s%@so_lib_dir@%$so_lib_dir%g -e s%@so_include_dir@%$so_include_dir%g -e s%@so_version@%$so_version%g > build/SoCoinSDK.tmp
  mv build/SoCoinSDK.tmp build/SoCoinSDK.iwz

  pf="build/soqt";
  sim_ac_winfiles="${pf}.dsp ${pf}.mak ${pf}_dll.dsp ${pf}_dll.mak"
  sim_ac_winfiles="${sim_ac_winfiles} build/SoCoinSDK.iwz";

  for sim_ac_winfile in $sim_ac_winfiles; do
    mv $sim_ac_winfile $sim_ac_winfile.bak
    echo "(Win)DOS-ifying $sim_ac_winfile"
    sed -e 's/$/
/' < $sim_ac_winfile.bak > $sim_ac_winfile
    rm $sim_ac_winfile.bak
  done
  sed -e 's/$/
/' < ${srcdir}/LICENSE.QPL > build/qpl.txt
  sed -e 's/$/
/' < ${srcdir}/info.cvs > build/info.txt

  if test -d ${srcdir}/examples; then
    cat <<EOF

  ATTENTION:  You can remove the 'examples' directory from So$Gui.  It has
  been obsoleted by the stand-alone module 'SoGuiExamples'.
EOF
  fi

  echo ""
  echo "If this is your first time building SoQt, please read 'README.WIN'"
  echo "for a step-by-step guide to building SoQt with MSVC++."
  echo ""
else
  if test -d ${srcdir}/examples; then
    cat <<EOF

  ATTENTION:  You can remove the 'examples' directory from So$Gui.  It has
  been obsoleted by the stand-alone module 'SoGuiExamples'.
EOF
  fi
  echo ""
  echo "Now, run 'make install' to build and install SoQt..."
  echo ""
fi

# **************************************************************************
