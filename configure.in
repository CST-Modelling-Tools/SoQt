# **************************************************************************
# SoQt/configure.in

m4_define([MAJOR_VERSION], [0])
m4_define([MINOR_VERSION], [10])
m4_define([MICRO_VERSION], [0])
m4_define([VERSION_STRING], [MAJOR_VERSION.MINOR_VERSION.MICRO_VERSION])

AC_INIT([SoQt], [VERSION_STRING])

AC_CONFIG_AUX_DIR(cfg)
AC_CONFIG_SRCDIR(src/Inventor/Qt/SoQt.cpp)

# **************************************************************************
# Make sure the given source repository is in sync with the master source
# repository.

SIM_AC_CVS_CHANGES([
  # the addition of the "data" module
  SIM_AC_CVS_CHANGE([
    cvs co SoQtData
  ], [test -d data/CVS])

  # the removal of the examples directory (now a separate SoGuiExamples module)
  SIM_AC_CVS_CHANGE([
    rm -rf examples
  ], [test ! -d examples])

  # the moving of "conf-macros" to "cfg/m4"
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co SoQtMacros
  ], [test ! -d conf-macros], [test -d cfg/m4/CVS])
])

# **************************************************************************

AC_CANONICAL_SYSTEM

SIM_AC_SETUP_MSVC_IFELSE([], [
  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build SoQt on Cygwin])
    ;;
  esac
])

# **************************************************************************
# Library versioning. For information about our versioning strategy, see the
# document ``HACKING'' in the Coin CVS module.

SOQT_MAJOR_VERSION=MAJOR_VERSION
SOQT_MINOR_VERSION=MINOR_VERSION
SOQT_MICRO_VERSION=MICRO_VERSION
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION
VERSION=$SOQT_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)

# Libtool versioning
LT_CURRENT=`expr $SOQT_MAJOR_VERSION \* 20 + $SOQT_MINOR_VERSION`
LT_AGE=$SOQT_MINOR_VERSION
LT_REVISION=$SOQT_MICRO_VERSION

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION,
  [Define to the major version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION,
  [Define to the minor version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION,
  [Define to the micro version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION",
  [Version string for SoQt])

# **************************************************************************
# Miscellaneous options and initializations.

AM_INIT_AUTOMAKE(SoQt, $VERSION)

# File to cram results from the configure tests into.
# we pit this in src/ to avoid having to add extra INCLUDES directives in
# MAkefile.am
AM_CONFIG_HEADER(src/config.h)

# Default to not building a static library.
# Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

# Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

# Use C++ for configure tests and Libtool.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_LANG(C++)

AC_OBJEXT
AC_EXEEXT

# Initialize libtool
if $BUILD_WITH_MSVC; then
  RANLIB=:
fi

SIM_AC_MAC_CPP_ADJUSTMENTS

AC_PROG_LIBTOOL

# used with libtool 1.3.5
# case "$host_os" in
# irix*)
#   # should really test if $CC = CC
#   if test x"${AR+set}" != x"set"; then
#     if test x"$CXX" = xCC; then
#       echo "modifying libtool"
#       mv libtool libtool.orig
#       sed -e 's/\\\$AR cru/CC -ar -o/' <libtool.orig >libtool
#       chmod 755 libtool
#       rm -f libtool.orig
#     fi
#   fi
#   ;;
# esac

# fix some mess created by AC_PROG_LIBTOOL
# AC_LANG(C)
# AC_LANG(C++)

# These are used for constructing the soqt-config file.
AC_SUBST(SOGUI_EXTRA_CPPFLAGS, $CPPFLAGS)
AC_SUBST(SOGUI_EXTRA_LDFLAGS, $LDFLAGS)
AC_SUBST(SOGUI_EXTRA_LIBS, $LIBS)

# SIM_EXPAND_DIR_VARS

case $host in
*-cygwin) path_tag="<PATH>" ;;
*)        path_tag= ;;
esac

AC_SUBST(path_tag)

# **************************************************************************

AC_ARG_WITH(
  [alternate],
  [AC_HELP_STRING([--with-alternate=string],
                  [specify name of alternate configuration])],
  [CONFIG=$withval],
  [CONFIG=default])

AC_SUBST(CONFIG)

AC_ARG_WITH(
  [suffix],
  [AC_HELP_STRING([--with-suffix=string],
                  [specify library name suffix (e.g. "_g")])],
  [SUFFIX=$withval],
  [SUFFIX=])

AC_SUBST(SUFFIX)

# FIXME: what's this? *Comment* disabled code, for f*ck's sake! 20011011 mortene.
# INSTALL_HEADER="\
# INSTALL='\$(INSTALL_DATA)' \$(SHELL) \$(top_srcdir)/cfg/install-header"
# AC_SUBST(INSTALL_HEADER)

# **************************************************************************
# If you just want to generate docs, ignore all the build-related tests

sim_ac_build_library=true
AC_ARG_ENABLE(
  [build],
  AC_HELP_STRING([--disable-build], [disable configuring for library build]), [
  case $enableval in
    no) sim_ac_build_library=false ;;
    *)  ;;
  esac])

# *******************************************************************
# * Do we want to build the documentation?
# *******************************************************************

AC_ARG_VAR([htmldir],
           [destination for HTML docs (default ${datadir}/SoQt/html)])

AC_ARG_ENABLE(html,
  AC_HELP_STRING([--enable-html], [build and install SoQt HTML documentation]),
  [case $enableval in
    yes | true) want_html=yes ;;
    *)          want_html=no ;;
  esac],
  [want_html=no])

coin_html_dir=`pwd`/html

case $htmldir in
"")
  htmldir="$datadir/SoQt/html"
  ;;
/*)
  # do nothing - absolute path
  ;;
*)
  htmldir="\${prefix}/$htmldir"
  ;;
esac

AC_SUBST(htmldir)

AC_ARG_ENABLE(man,
  AC_HELP_STRING([--enable-man], [build and install SoQt man pages]),
  [case $enableval in
    yes | true) want_man=yes ;;
    *)          want_man=no ;;
  esac],
  [want_man=no])

coin_man_dir=`pwd`/man

# Used in the Doxygen parameter file.
SOQT_DOC_HTML=`echo $want_html | tr '[a-z]' '[A-Z]'`
SOQT_DOC_MAN=`echo $want_man | tr '[a-z]' '[A-Z]'`
AC_SUBST(SOQT_DOC_HTML)
AC_SUBST(soqt_html_dir)
AC_SUBST(SOQT_DOC_MAN)
AC_SUBST(soqt_man_dir)

soqt_build_dir=`pwd`
soqt_src_dir=`cd $srcdir; pwd`

AC_SUBST(soqt_build_dir)
AC_SUBST(soqt_src_dir)

AM_CONDITIONAL(BUILD_MANPAGES, test x"$want_man" = x"yes")
AM_CONDITIONAL(BUILD_HTMLPAGES, test x"$want_html" = x"yes")

if test x"$want_man" = x"yes"; then
  SIM_AC_CONFIGURATION_SETTING([manpage installation], [$mandir])
fi

if test x"$want_html" = x"yes"; then
  SIM_AC_CONFIGURATION_SETTING([HTML installation], [$htmldir])
fi

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL([], [SIM_AC_ERROR([no-doxygen])])
  # too much overhead in maintaining this stupid thing...
  # sim_ac_doxygen_our_version=1.2.1
  # if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
  #   AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  # fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
fi

# path_tag is used to identify paths in docs/coin.doxygen that needs to be
# transformed using cygpath under cygwin.

case $host in
*-cygwin) path_tag="<PATH>" ;;
*)        path_tag= ;;
esac

AC_SUBST(path_tag)

if $sim_ac_build_library; then

# **************************************************************************
# Header files we might want.

AC_CHECK_HEADERS([windows.h unistd.h sys/types.h sys/time.h X11/extensions/SGIMisc.h X11/Xproto.h X11/extensions/XInput.h netinet/in.h])

# **************************************************************************
# Search and set up necessary stuff to use Open Inventor or Coin.

## Run AC_PATH_XTRA outside the if-then-else-fi, as AC_PATH_XTRA
## AC_REQUIREs AC_PATH_X, which means AC_PATH_X will only get
## expanded on the first AC_PATH_XTRA, which means trouble when
## AC_PATH_XTRA uses $no_x="yes"? from AC_PATH_X to decide whether
## or not to define X_DISPLAY_MISSING on X11-less systems.

AC_PATH_XTRA

# $with_inventor is from within SIM_AC_HAVE_INVENTOR_IFELSE, and can
# be used here since the value is empty when it reaches this point
# unless it has been explicitly set.

AC_ARG_ENABLE(
  [inventor-debug],
  AC_HELP_STRING([--enable-inventor-debug],
                 [use debug version of TGS inventor]))

if test x"${with_inventor+set}" = x"set" &&
   test x"${with_inventor}" != x"no"; then

  # For Open Inventor linkage, we need to check for a shitload of libraries.

  SIM_AC_CHECK_DL([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_dl_libs $SOGUI_EXTRA_LIBS"
  ])

  SIM_AC_CHECK_X11([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_x11_libs $SOGUI_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_AC_CHECK_X11SHMEM(SOGUI_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOGUI_EXTRA_LIBS")
    SIM_AC_CHECK_X11MU(SOGUI_EXTRA_LIBS="$sim_ac_x11mu_libs $SOGUI_EXTRA_LIBS")
    SIM_AC_CHECK_X11XID(SOGUI_EXTRA_LIBS="$sim_ac_x11xid_libs $SOGUI_EXTRA_LIBS")
  fi

  SIM_AC_CHECK_OPENGL([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_gl_libs $SOGUI_EXTRA_LIBS"
    CPPFLAGS="$CPPFLAGS $sim_ac_gl_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_gl_ldflags"
    LIBS="$sim_ac_gl_libs $LIBS"
  ], AC_MSG_ERROR([needs an OpenGL-compatible development system installation]))

  SIM_AC_CHECK_GLU([
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_glu_libs $SOGUI_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs the OpenGL utility library))

  SIM_AC_HAVE_INVENTOR_IFELSE(
    [CPPFLAGS="$sim_ac_inventor_cppflags $CPPFLAGS"
     LDFLAGS="$sim_ac_inventor_ldflags $LDFLAGS"
     LIBS="$sim_ac_inventor_libs $LIBS"
     SOGUI_EXTRA_CPPFLAGS="$sim_ac_inventor_cppflags $SOGUI_EXTRA_CPPFLAGS"
     SOGUI_EXTRA_LDFLAGS="$sim_ac_inventor_ldflags $SOGUI_EXTRA_LDFLAGS"
     SOGUI_EXTRA_LIBS="$sim_ac_inventor_libs $SOGUI_EXTRA_LIBS"],
    AC_MSG_ERROR(couldn't compile and link against Open Inventor))

  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [SGI/TGS Inventor])
else

  SIM_AC_CHECK_HEADER_GL([
    CPPFLAGS="$CPPFLAGS $sim_ac_gl_cppflags"
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
  ], [AC_MSG_ERROR([could not detect a gl.h header file])])

  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOGUI_EXTRA_LIBS="$sim_ac_coin_libs $SOGUI_EXTRA_LIBS"
  ], [AC_MSG_ERROR([couldn't compile and link against Coin])])

  SIM_AC_CHECK_X11_READY(
    [sim_ac_x11_ready=true],
    [sim_ac_x11_ready=false])

  if ! $sim_ac_x11_ready; then
    SIM_AC_CHECK_X11([
      CPPFLAGS="$CPPFLAGS $sim_ac_x11_cppflags"
      LDFLAGS="$LDFLAGS $sim_ac_x11_ldflags"
      LIBS="$sim_ac_x11_libs $LIBS"
      SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
      SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
      SOGUI_EXTRA_LIBS="$sim_ac_x11_libs $SOGUI_EXTRA_LIBS"
    ])
    # FIXME: we just implicitly assume that -lXext and -lXmu is available
    # if -lX11 is available from coin-config. Should really have macros
    # SIM_AC_CHECK_[X11SHMEM|X11MU]_READY. 20001116 mortene.
    if test x"$sim_ac_x11_avail" = xyes; then
      SIM_AC_CHECK_X11SHMEM([
        # LIBS="$sim_ac_x11shmem_libs $LIBS"
        SOGUI_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOGUI_EXTRA_LIBS"
      ])
      SIM_AC_CHECK_X11MU([
        # LIBS="$sim_ac_x11mu_libs $LIBS"
        SOGUI_EXTRA_LIBS="$sim_ac_x11mu_libs $SOGUI_EXTRA_LIBS"
      ])
    fi
  fi
  SIM_AC_CHECK_X11XID([
	SOGUI_EXTRA_LIBS="$sim_ac_x11xid_libs $SOGUI_EXTRA_LIBS"
  ])
  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [Coin])
fi

SIM_AC_CHECK_X11_READY([AC_DEFINE([HAVE_X11_AVAILABLE],,
                          [define if it is possible to build against X11])])

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.
SIM_AC_HAVE_INVENTOR_NODE(SoPolygonOffset)

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoKeyboardEvent::DELETE enum],
  [#include <Inventor/events/SoKeyboardEvent.h>], [
   /* This is either DELETE or KEY_DELETE */
   SoKeyboardEvent::Key key = SoKeyboardEvent::DELETE;],
  [HAVE_SOKEYBOARDEVENT_DELETE])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoMouseButtonEvent::BUTTON5 enum],
  [#include <Inventor/events/SoMouseButtonEvent.h>], [
   /* mouse wheel support needs BUTTON4 and BUTTON5 */
   SoMouseButtonEvent::Button button = SoMouseButtonEvent::BUTTON5;],
  [HAVE_SOMOUSEBUTTONEVENT_BUTTON5])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoCamera::setStereoMode() method],
  [#include <Inventor/nodes/SoPerspectiveCamera.h>],
  [/* SoCamera is abstract, so test with SoPerspectiveCamera */
   SoPerspectiveCamera * c = new SoPerspectiveCamera;
   c->setStereoMode(SoCamera::MONOSCOPIC);],
  [HAVE_SOCAMERA_SETSTEREOMODE])

# **************************************************************************
# Check that the Qt installation looks ok and include the
# necessary paths and link libraries.

AC_PROG_CPP

if test x"$sim_ac_x11mu_avail" != xyes; then
  ## It's really QGL that depends on Xmu, not Qt. But we need to do this
  ## check before checking for the Qt library, not after, in case QGL is
  ## embedded into Qt.
  SIM_AC_CHECK_X11MU([SOGUI_EXTRA_LIBS="$sim_ac_x11mu_libs $SOGUI_EXTRA_LIBS"])
fi

SIM_AC_CHECK_QT([
  SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_qt_cppflags"
  SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_qt_ldflags"
  SOGUI_EXTRA_LIBS="$sim_ac_qt_libs $SOGUI_EXTRA_LIBS"
], [
  AC_MSG_ERROR([can't compile and link against Qt development kit])
])

SIM_AC_CHECK_QGL([
  SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS $sim_ac_qgl_cppflags"
  SOGUI_EXTRA_LDFLAGS="$SOGUI_EXTRA_LDFLAGS $sim_ac_qgl_ldflags"
  SOGUI_EXTRA_LIBS="$sim_ac_qgl_libs $SOGUI_EXTRA_LIBS"
], [
  AC_MSG_ERROR([can't compile and link against the QGL extension library])
])

# Check misc capabilities of the Qt and QGL libraries which depends
# on the exact version available to us.
SIM_AC_QT_KEYPAD_DEFINE
SIM_AC_QWIDGET_SHOWFULLSCREEN
SIM_AC_QGLFORMAT_EQ_OP
SIM_AC_QGLFORMAT_SETOVERLAY
SIM_AC_QGLWIDGET_SETAUTOBUFFERSWAP

# **************************************************************************
# Spaceball support through Linux Joystick driver

if false; then
  SIM_AC_CHECK_JOYSTICK_LINUX([
    AC_DEFINE(HAVE_JOYSTICK_LINUX, ,
      [Define to enable Linux Joystick driver support])
    AC_DEFINE_UNQUOTED(SOXT_LINUX_JOYSTICK_DEVICE,
      "$sim_ac_joystick_linux_device",
      [Define this to device handle to fallback on])
  ])
  AM_CONDITIONAL(HAVE_JOYSTICK_LINUX, $sim_ac_joystick_linux_avail)
else
  AM_CONDITIONAL(HAVE_JOYSTICK_LINUX, false)
  SIM_AC_CONFIGURATION_SETTING([Joystick Device], [Disabled])
fi

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG([
  CPPFLAGS="$CPPFLAGS -DSOQT_DEBUG=1"
], [
  CPPFLAGS="$CPPFLAGS -DSOQT_DEBUG=0"
])

SIM_AC_CHECK_VAR_FUNCTIONNAME

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# This is at least used to allow static compilation on Cygwin + MSWindows
# without hitting the SOQT_DLL / SOQT_NOT_DLL safety check.
CPPFLAGS="$CPPFLAGS -DSOQT_INTERNAL"


SIM_AC_SOGUI_STATIC_DEFAULTS

if $sim_ac_static_defaults; then
  SIM_AC_CONFIGURATION_SETTING([Static Materials], [Yes])
else
  SIM_AC_CONFIGURATION_SETTING([Static Materials], [No])
fi

if test -n "$SUFFIX"; then
  SIM_AC_CONFIGURATION_SETTING([SoQt library name suffix], [$SUFFIX])
fi

# **************************************************************************

COIN_COMPILER="$CXX"
if $BUILD_WITH_MSVC; then
  # don't use wrapmsvc from source hierarchy when later using soqt-config.
  COIN_COMPILER="wrapmsvc"
fi
AC_SUBST(COIN_COMPILER)

AM_CONDITIONAL([BUILD_METAFILES], [true])
AC_SUBST([meta_prefix], [moc_])

else # $sim_ac_build_library == false
  AC_SUBST([MOC], [moc])
fi

# Qt's moc wants Windows-style paths, so if the inputfile is an
# absolute Cygwin-style path it needs conversion.
AC_PATH_PROG(UNIX2WINPATH, cygpath, false)
if test x"$UNIX2WINPATH" = x"false"; then
  UNIX2WINPATH="echo"
else
  UNIX2WINPATH="CYGWIN= $UNIX2WINPATH -w"
fi
AC_SUBST([UNIX2WINPATH])

# **************************************************************************
# Variable substitutions for using libSoQt in the generic code.

AC_SUBST([Gui], [Qt])
AC_SUBST([gui], [qt])
AC_SUBST([GUI], [QT])
AC_SUBST([WIDGET], ["QWidget *"])
AC_SUBST([EVENT], ["QEvent *"])
AC_SUBST([COMPONENTHEADER], [Q_OBJECT])

# **************************************************************************
# Section for Doxygen

# AC_ARG_WITH(
#   html,
#   AC_HELP_STRING([--with-html], [build and install SoQt HTML documentation]),
#   [case "${withval}" in
#     yes) want_html=yes ;;
#     no)  want_html=no ;;
#     *) AC_MSG_ERROR(bad value "${withval}" for --with-html) ;;
#   esac],
#   [want_html=no])
# 
# AC_ARG_WITH(
#   man,
#   AC_HELP_STRING([--with-man], [build and install SoQt man pages]),
#   [case "${withval}" in
#     yes) want_man=yes ;;
#     no)  want_man=no ;;
#     *) AC_MSG_ERROR(bad value "${withval}" for --with-man) ;;
#   esac],
#   [want_man=no])
# 
# SOQT_DOC_HTML=`echo $want_html | tr a-z A-Z`
# SOQT_DOC_MAN=`echo $want_man | tr a-z A-Z`
# AC_SUBST(SOQT_DOC_HTML)
# AC_SUBST(SOQT_DOC_MAN)
# 
# soqt_dox_build_dir=`pwd`
# soqt_dox_src_dir=`cd $srcdir; pwd`
# 
# AC_SUBST(soqt_dox_src_dir)
# AC_SUBST(soqt_dox_build_dir)
# 
# if test x"$want_html" != xno -o x"$want_man" != xno; then
#   SIM_AC_DOXYGEN_TOOL(,
#     AC_MSG_ERROR([Could not find the doxygen tool -- see http://www.stack.nl/~dimitri/doxygen/]))
#   # sim_ac_doxygen_our_version=1.1.5
#   # if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
#   #   AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
#   # fi
# 
#   AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
#   if test x"$sim_ac_perl_exe" = xfalse; then
#     AC_MSG_WARN(Could not find the Perl executable)
#   fi
#   AC_SUBST(sim_ac_perl_exe)
# fi

# **************************************************************************
# Remove redundant options from certain option lists.

SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_CPPFLAGS, -I$includedir $SOGUI_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_LDFLAGS, -L$libdir $SOGUI_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(SOGUI_EXTRA_LIBS, $SOGUI_EXTRA_LIBS)

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# default value
SOQT_STATIC=false

if test x${enable_shared+set} = xset; then
  case $enable_shared in
  yes | true)  SOQT_STATIC=false ;;
  *)           SOQT_STATIC=true ;;
  esac
fi

if test x${enable_static+set} = xset; then
  case $enable_static in
  yes | true)  SOQT_STATIC=true ;;
  *)           SOQT_STATIC=false ;;
  esac
fi

LIBFLAGS=
AC_SUBST(LIBFLAGS)

# **************************************************************************
# Remaining setup based on platform.

AM_CONDITIONAL(BUILD_WITH_MSVC, $BUILD_WITH_MSVC)

if $BUILD_WITH_MSVC; then
  if $SOQT_STATIC; then
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS -DSOQT_NOT_DLL"
  else
    CPPFLAGS="-DSOQT_MAKE_DLL $CPPFLAGS"
    SOGUI_EXTRA_CPPFLAGS="$SOGUI_EXTRA_CPPFLAGS -DSOQT_DLL"
  fi

  debugfile="`pwd`/src/Inventor/Qt/soqt${SOQT_MAJOR_VERSION}${SUFFIX}.pdb"
  debugfile=`cygpath -w "$debugfile" | sed 's,\\\\,\\\\\\\\,g'`
  if $SOQT_STATIC; then
    SIM_AC_CONFIGURATION_SETTING([SoQt build type], [static .lib])
    LIBFLAGS="-LIB"
    LIBFLAGS="$LIBFLAGS /OUT:soqt$SOQT_MAJOR_VERSION$SUFFIX.lib"
  else
    LIBFLAGS="-DLL /INCREMENTAL:NO"
    case $enable_symbols in
    no | false)
      LIBFLAGS="$LIBFLAGS /RELEASE"
      SIM_AC_CONFIGURATION_SETTING([SoQt build type],
                                   [dynamic .dll, no symbols])
      ;;
    *)
      SIM_AC_CONFIGURATION_SETTING([SoQt build type], [dynamic .dll + .pdb])
      CPPFLAGS="/Fd$debugfile $CPPFLAGS"
      LIBFLAGS="$LIBFLAGS /DEBUG /PDB:soqt$SOQT_MAJOR_VERSION$SUFFIX.pdb"
      ;;
    esac
    LIBFLAGS="$LIBFLAGS /OUT:soqt$SOQT_MAJOR_VERSION$SUFFIX.dll"
  fi

  # We use a version suffix on the .dll-file, so several incompatible
  # (major) versions can be installed on a system.
  #
  # BTW, when linking DLLs, the 3rd-party .lib files will be
  # linked into the .dll file. I believe it is still advisable to
  # list all libs used upon `soqt-config --libs`, as we can then
  # also use them from "parent" code (remember that their interfaces
  # is not exposed from the DLL) without any fuss.
  SOGUI_EXTRA_LIBS="-lsoqt$SOQT_MAJOR_VERSION$SUFFIX $SOGUI_EXTRA_LIBS"

  # For build/soqt.nsi
  win_srcdir=`cd $srcdir; pwd`
  win_srcdir=`cygpath -w "$srcdir" | sed 's,\\\\,\\\\\\\\,g'`
  AC_SUBST(win_srcdir)
else
  SOGUI_EXTRA_LIBS="-lSoQt$SUFFIX $SOGUI_EXTRA_LIBS"

  # For the build/soqt.spec RPM specification file.
  SIM_AC_ISO8601_DATE(soqt_configure_date)
  AC_SUBST(soqt_configure_date)
fi

HTML_DOC_DIR=`eval echo "$datadir/SoQt/html"`
AC_SUBST([HTML_DOC_DIR])

# **************************************************************************
# Submodules that needs to be configured...

# AC_CONFIG_SUBDIRS(data)

# **************************************************************************
# List all files configure shall automatically generate.
#
# Note that soxt-$CONFIG.cfg needs to be generated from the configure
# script -- not just from the Makefile -- as the data/configure script
# depends on it.

AC_OUTPUT([
	soqt-$CONFIG.cfg:src/Inventor/Qt/common/sogui.cfg.in
	Makefile
	src/Makefile
	src/Inventor/Makefile
	src/Inventor/Qt/Makefile
	src/Inventor/Qt/devices/Makefile
	src/Inventor/Qt/viewers/Makefile
	src/Inventor/Qt/widgets/Makefile
	man/Makefile
	man/man1/Makefile
	man/man3/Makefile
	html/Makefile
        build/soqt.spec
])

SIM_AC_CONFIGURATION_SETTING([Installation Prefix], [$prefix])

SIM_AC_CONFIGURATION_SUMMARY

echo ""
echo "Now, run 'make install' to build and install $PACKAGE."
echo ""

# **************************************************************************
