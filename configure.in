dnl  This can be any file in the package.
AC_INIT(src/SoQt.cpp)

dnl  Locate C++ compiler and set C++ as the default compiler to run
dnl  in tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS


dnl *******************************************************************
dnl * Library version control.
dnl *******************************************************************

dnl  Making releases:
dnl    SOQT_MICRO_VERSION += 1;
dnl    SOQT_INTERFACE_AGE += 1;
dnl    SOQT_BINARY_AGE += 1;
dnl  if any functions have been added, set SOQT_INTERFACE_AGE to 0.
dnl  if backwards compatibility has been broken,
dnl  set SOQT_BINARY_AGE _and_ SOQT_INTERFACE_AGE to 0.
dnl 
SOQT_MAJOR_VERSION=0
SOQT_MINOR_VERSION=8
SOQT_MICRO_VERSION=0
SOQT_INTERFACE_AGE=0
SOQT_BINARY_AGE=0
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)
AC_SUBST(SOQT_INTERFACE_AGE)
AC_SUBST(SOQT_BINARY_AGE)

dnl  libtool versioning
LT_RELEASE=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION
LT_CURRENT=`expr $SOQT_MICRO_VERSION - $SOQT_INTERFACE_AGE`
LT_REVISION=$SOQT_INTERFACE_AGE
LT_AGE=`expr $SOQT_BINARY_AGE - $SOQT_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOQT_VERSION

dnl  Not in use yet, use the same technique as in
dnl  include/Inventor/SbBasic.h.in.
dnl  AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION")

dnl *******************************************************************
dnl * Miscellaneous options and initializations.
dnl *******************************************************************

AM_INIT_AUTOMAKE(libSoQt, $VERSION)

dnl  File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

dnl  Default to not building a static library.
dnl  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

dnl  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

dnl  Initialize libtool
AM_PROG_LIBTOOL


dnl *** locate X library before we check for Qt installation or OIV ***

AC_PATH_XTRA
if test "x$no_x" = "xyes"; then
  AC_MSG_ERROR([X11 libraries couldn't be found! (use --x-includes and --x-libraries to locate them)])
fi


dnl *******************************************************************
dnl * Check if we want to build on top of Open Inventor (if available).
dnl *******************************************************************

AC_ARG_WITH(inventor,
  [  --with-inventor         build on top of Open Inventor (if found) instead of Coin [default=no]],
  [case "${withval}" in
    yes) want_inventor=yes ;;
    no)  want_inventor=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-inventor) ;;
  esac],
  [want_inventor=no])

dnl *******************************************************************
dnl * Check if Open Inventor development system is installed (if necessary).
dnl *******************************************************************

if test "x$want_inventor" = "xyes"; then
  AC_MSG_CHECKING(value of the OIVHOME environment variable)
  if test "x$OIVHOME" = "x"; then
    AC_MSG_RESULT(empty!)
    AC_MSG_WARN(OIVHOME environment variable not set -- this might be an indication of a problem)
  else
    AC_MSG_RESULT($OIVHOME)
    CXXFLAGS="$CXXFLAGS -I$OIVHOME/include"
    LDFLAGS="$LDFLAGS -L$OIVHOME/lib"
  fi

  AC_MSG_CHECKING(for Open Inventor header files)
  AC_TRY_COMPILE([#include <Inventor/SbBasic.h>], [], inventor_dev=yes, inventor_dev=no)
  AC_MSG_RESULT($inventor_dev)
  if test "x$inventor_dev" = "xno"; then
    AC_MSG_ERROR(could not find the Open Inventor include files -- we need them to build SoQt!)
  fi

  inventortest_save_LIBS=$LIBS
  AC_CHECK_LIB(Inventor, main, , inventor_dev=no, -limage -lMesaGLU -lMesaGL $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS -lXext -ldl)
  if test "x$inventor_dev" = "xno"; then
    AC_MSG_ERROR(libInventor development system not found -- can't build on top of Open Inventor!)
  fi
  LIBS=$inventortest_save_LIBS
else
  dnl *******************************************************************
  dnl * Check if libCoin is installed.
  dnl *******************************************************************
  
  AC_MSG_CHECKING(for Coin header files)

  dnl First try standard system locations.
  AC_TRY_CPP([#include <Inventor/SbBasic.h>], coin_dev=yes, coin_dev=no)

  dnl Not found in any of the standard system locations, try SoQt
  dnl installation directory.
  if test "x$coin_dev" = "xno"; then
    _SOQTPREFIX=$prefix
    test "x$_SOQTPREFIX" = xNONE && _SOQTPREFIX=$ac_default_prefix
    _SOQTEPREFIX=$exec_prefix
    test "x$_SOQTEPREFIX" = xNONE && _SOQTEPREFIX=$_SOQTPREFIX
    _SAVECPPFLAGS=$CPPFLAGS
    CPPFLAGS="-I$_SOQTPREFIX/include $CPPFLAGS"
    AC_TRY_CPP([#include <Inventor/SbBasic.h>], coin_dev=yes, coin_dev=no)
    CPPFLAGS=$_SAVECPPFLAGS
    if test "x$coin_dev" = "xyes"; then
      CPPFLAGS="-I$_SOQTPREFIX/include $CPPFLAGS"
      LDFLAGS="-L$_SOQTEPREFIX/lib $LDFLAGS"
    fi
  fi

  AC_MSG_RESULT($coin_dev)

  if test "x$coin_dev" = "xyes"; then
    dnl FIXME: this doesn't work, as the AC_CHECK_LIB only can check against
    dnl functions in a C library. Add a new macro AC_CHECK_CXXLIB? Ask on the
    dnl autoconf list. 19990918 mortene.
    dnl AC_CHECK_LIB(Coin, SoDB::init, , coin_dev=no)
    AC_CHECK_LIB(Coin, main, , coin_dev=no)
  fi
  if test "x$coin_dev" = "xno"; then
    AC_MSG_ERROR(libCoin development system not found)
  fi
fi

dnl *******************************************************************
dnl * Check that the Qt installation looks ok and include the
dnl * necessary paths and link libraries.
dnl * FIXME: make a macro out of this and submit it to the autoconf macro
dnl * archive? 19990917 mortene.
dnl *******************************************************************

dnl *** warn if QTDIR has not been set ***

AC_MSG_CHECKING(value of the QTDIR environment variable)
if test "x$QTDIR" = "x"; then
  AC_MSG_RESULT(empty!)
  AC_MSG_WARN(QTDIR environment variable not set -- this might be an indication of a problem)
else
  AC_MSG_RESULT($QTDIR)
  CXXFLAGS="$CXXFLAGS -I$QTDIR/include"
  LDFLAGS="$LDFLAGS -L$QTDIR/lib"
fi

dnl *** moc ***

if test "x$QTDIR" != "x"; then
  AC_PATH_PROG(MOC, moc, , $QTDIR/bin:$PATH)
else
  AC_PATH_PROG(MOC, moc)
fi

if test "x$MOC" = "x"; then
  AC_MSG_ERROR(could not find the moc tool -- we need a complete Qt installation to build SoQt!)
fi

dnl *** find Qt header files ***

AC_MSG_CHECKING(for Qt header files)
AC_TRY_COMPILE([#include <qapplication.h>], [], qt_dev=yes, qt_dev=no)
AC_MSG_RESULT($qt_dev)
if test "x$qt_dev" = "xno"; then
  AC_MSG_ERROR(could not find the Qt include files -- we need a complete Qt installation to build SoQt!)
fi

dnl *** find Qt link library ***

dnl FIXME: this doesn't work, as the AC_CHECK_LIB only can check against
dnl functions in a C library. Add a new macro AC_CHECK_CXXLIB? Ask on the
dnl autoconf list. 19990918 mortene.
dnl AC_CHECK_LIB(qt, qVersion, , AC_MSG_ERROR(could not find the Qt library!), $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(qt, main, , AC_MSG_ERROR(could not find the Qt library!), $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS)


dnl *** find QGL extension, header file ***

AC_MSG_CHECKING(for QGL header files)
AC_TRY_COMPILE([#include <qgl.h>], [], qgl_dev=yes, qgl_dev=no)
AC_MSG_RESULT($qgl_dev)
if test "x$qgl_dev" = "xno"; then
  AC_MSG_ERROR(could not find the QGL include file -- you must compile and install the QGLWidget library found in \$QTDIR/extensions/opengl to compile SoQt!)
fi

dnl *** find QGL extension, link library ***

dnl FIXME: this doesn't work, as the AC_CHECK_LIB only can check against
dnl functions in a C library. Add a new macro AC_CHECK_CXXLIB? Ask on the
dnl autoconf list. 19990918 mortene.
dnl AC_CHECK_LIB(qgl, qGLVersion, , AC_MSG_ERROR(could not find the QGL library!))
AC_CHECK_LIB(qgl, main, , AC_MSG_ERROR(could not find the QGL library!))


dnl *******************************************************************
dnl * Enable/disable compilation with debug information.
dnl *******************************************************************

AC_ARG_ENABLE(debug,
  [  --enable-debug          turn on SoQt debugging [default=yes]],
  [case "${enableval}" in
    yes) enable_debug=yes ;;
    no)  enable_debug=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-debug) ;;
  esac],
  enable_debug=yes)

if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=0 -DNDEBUG"
fi


dnl *******************************************************************
dnl * Enable/disable compilation with symbol information.
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(symbols,
    [  --enable-symbols        turn on symbol debug information [default=yes]],
    [case "${enableval}" in
      yes) enable_symbols=yes ;;
      no)  enable_symbols=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-symbols) ;;
    esac],
    enable_symbols=yes)

  if test "x$enable_symbols" = "xno"; then
    CXXFLAGS="`echo $CXXFLAGS | sed 's/-g//'`"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with profiling information
dnl * for parsing by gprof (this is a g++ only option).
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(profile,
    [  --enable-profile        turn on inclusion of profiling code [default=no]],
    [case "${enableval}" in
      yes) enable_profile=yes ;;
      no)  enable_profile=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-profile) ;;
    esac],
    enable_profile=no)

  if test "x$enable_profile" = "xyes"; then
    CXXFLAGS="$CXXFLAGS -pg"
    LDFLAGS="$LDFLAGS -pg"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with warnings turned on (g++ only).
dnl *******************************************************************

if test "x$ac_cv_prog_gxx" = "xyes"; then
  AC_ARG_ENABLE(warnings,
    [  --enable-warnings       turn on warnings when compiling [default=no]],
    [case "${enableval}" in
      yes) enable_warnings=yes ;;
      no)  enable_warnings=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-warnings) ;;
    esac],
    enable_warnings=no)

  if test "x$enable_warnings" = "xyes"; then
    CXXFLAGS="$CXXFLAGS -W -Wall"
  fi
fi


dnl *******************************************************************

if test "x$inventor_dev" = "xyes"; then
  LIBS="-lInventor -limage -lMesaGLU -lMesaGL $LIBS $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS -lXmu -lXext -ldl"
fi

dnl *******************************************************************
dnl * List all files configure shall generate.
dnl *******************************************************************

AC_OUTPUT(Makefile src/Makefile \
	src/devices/Makefile src/viewers/Makefile src/widgets/Makefile \
	examples/Makefile examples/examinerviewer/Makefile \
	examples/widgets/Makefile)
