dnl  This can be any file in the package.
AC_INIT(src/Inventor/Qt/SoQt.h)

sim_ac_cvs_syncproblem=false;

if test ! -f ${srcdir}/examples/ChangeLog; then
  if test "x${with_auto_cvs_update+set}" = "xset"; then
    echo "Trying to honour the --with-auto-cvs-update option."
    sim_ac_save_cwd="`pwd`"
    cd ${srcdir}
    if test ! -d ./examples -o ! -f ./CVS/Entries; then
      AC_MSG_ERROR(
        [something failed horribly - can't do --with-auto-cvs-update])
    fi
    grep -v "^D/examples/" CVS/Entries > /tmp/SoQt-CVS-Entries.$$
    cp /tmp/SoQt-CVS-Entries.$$ CVS/Entries
    rm /tmp/SoQt-CVS-Entries.$$
    rm -rf examples
    cvs co SoQtExamples
    cd ${sim_ac_save_cwd}
    echo "Done.  Proceeding..."
  fi
fi

if test ! -f ${srcdir}/examples/ChangeLog; then
  echo ""
  echo "  You appear to have an old setup of the SoQe source repository."
  echo "  Parts of it have changed structurally, and you need to do the"
  echo "  following in the SoQt source directory:"
  echo ""
  echo "    \$ grep -v "^D/examples/" CVS/Entries > /tmp/SoQt-CVS-Entries"
  echo "    \$ cp /tmp/SoQt-CVS-Entries CVS/Entries"
  echo "    \$ rm /tmp/SoQt-CVS-Entries"
  echo "    \$ rm -rf examples"
  echo "    \$ cvs co SoQtExamples"
  echo ""
  echo "  You can also run configure with the option --with-auto-cvs-update"
  echo "  to allow the configure script to try to take care of this.  This"
  echo "  option is very experimental and should not be used if you run"
  echo "  configure some \"weird\" way."
  echo ""
  sim_ac_cvs_syncproblem=true
fi

if test "x$sim_ac_cvs_syncproblem" = "xtrue"; then
  exit
fi

dnl  Locate C++ compiler and set C++ as the default compiler to run
dnl  in tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

dnl *******************************************************************
dnl * Library version control.
dnl *******************************************************************

dnl  Making releases:
dnl    SOQT_MICRO_VERSION += 1;
dnl    SOQT_INTERFACE_AGE += 1;
dnl    SOQT_BINARY_AGE += 1;
dnl  if any functions have been added, set SOQT_INTERFACE_AGE to 0.
dnl  if backwards compatibility has been broken,
dnl  set SOQT_BINARY_AGE _and_ SOQT_INTERFACE_AGE to 0.
dnl 
SOQT_MAJOR_VERSION=0
SOQT_MINOR_VERSION=8
SOQT_MICRO_VERSION=1
SOQT_INTERFACE_AGE=0
SOQT_BINARY_AGE=0
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)
AC_SUBST(SOQT_INTERFACE_AGE)
AC_SUBST(SOQT_BINARY_AGE)

dnl  libtool versioning
LT_RELEASE=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION
LT_CURRENT=`expr $SOQT_MICRO_VERSION - $SOQT_INTERFACE_AGE`
LT_REVISION=$SOQT_INTERFACE_AGE
LT_AGE=`expr $SOQT_BINARY_AGE - $SOQT_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOQT_VERSION

dnl  Not in use yet, should eventually use the same technique as in
dnl  include/Inventor/SbBasic.h.in.
dnl  AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION)
dnl  AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION")

dnl *******************************************************************
dnl * Miscellaneous options and initializations.
dnl *******************************************************************

AM_INIT_AUTOMAKE(libSoQt, $VERSION)

dnl  File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

dnl  Default to not building a static library.
dnl  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

dnl  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

dnl  Initialize libtool
AC_PROG_LIBTOOL

dnl  These are used for constructing the soqt-config file.
SOQT_EXTRA_CPPFLAGS=
SOQT_EXTRA_LDFLAGS=
SOQT_EXTRA_LIBS=
AC_SUBST(SOQT_EXTRA_CPPFLAGS)
AC_SUBST(SOQT_EXTRA_LDFLAGS)
AC_SUBST(SOQT_EXTRA_LIBS)

dnl *******************************************************************
dnl * Search and set up necessary stuff to use Open Inventor or Coin.
dnl *******************************************************************

# $with_inventor is from within SIM_CHECK_INVENTOR(), and can be used
# here since the value is empty when it reaches this point unless
# it has been explicitly set.

if test x"$with_inventor" = xyes; then
  # For Open Inventor linkage, we need to check for a shitload of libraries.

  SIM_CHECK_DL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_dl_libs $SOQT_EXTRA_LIBS"
  ])

  SIM_CHECK_X11([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_CHECK_X11SHMEM(SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS")
    SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
  fi

  SIM_CHECK_OPENGL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_gl_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs an OpenGL-compatible development system installation))


  SIM_CHECK_INVENTOR([
    SOQT_EXTRA_CPPFLAGS="$sim_ac_oiv_cppflags $SOQT_EXTRA_CPPFLAGS"
    SOQT_EXTRA_LDFLAGS="$sim_ac_oiv_ldflags $SOQT_EXTRA_LDFLAGS"
    SOQT_EXTRA_LIBS="$sim_ac_oiv_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(couldn't compile and link against Open Inventor))

else

  SIM_CHECK_COIN([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_coin_libs $SOQT_EXTRA_LIBS"
  ],[
    AC_MSG_ERROR(couldn't compile and link against Coin)
  ],[
    default searchprefix
  ])
fi

dnl *******************************************************************
dnl * Check that the Qt installation looks ok and include the
dnl * necessary paths and link libraries.
dnl *******************************************************************

SIM_CHECK_QT([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qt_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qt_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qt_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against Qt development kit))

if test x"$sim_ac_x11mu_avail" != xyes; then
  SIM_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
fi

SIM_CHECK_QGL([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qgl_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qgl_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qgl_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against the QGL extension library))

dnl *******************************************************************
dnl * Compiler control.
dnl *******************************************************************

SIM_COMPILE_DEBUG
if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DSOQT_DEBUG=0"
fi

SIM_DEBUGSYMBOLS
SIM_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

dnl *******************************************************************
dnl * do we want to compile the example programs?
dnl *******************************************************************

dnl * undocumented option --with-test-code
AM_CONDITIONAL(BUILD_TESTS, test x"${with_test_code+set}" = "xset")

AC_ARG_WITH(examples,
  AC_HELP_STRING([--with-examples], [build example programs [default=yes]]),
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-examples) ;;
  esac],
  [want_examples=yes])

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)

dnl *******************************************************************
dnl * Variable substitutions for using libSoQt in the generic code.
dnl *******************************************************************

GUI="Qt"
lGUI="qt"
uGUI="QT"
WIDGET="QWidget *"
EVENT="QEvent *"
COMPONENTHEADER="Q_OBJECT"

AC_SUBST(GUI)
AC_SUBST(lGUI)
AC_SUBST(uGUI)
AC_SUBST(WIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

AM_CONDITIONAL(HAVE_RENDERAREA, true)
AM_CONDITIONAL(HAVE_EXAMINERVIEWER, true)
AM_CONDITIONAL(HAVE_PLANEVIEWER, true)
AM_CONDITIONAL(HAVE_WALKVIEWER, false)
AM_CONDITIONAL(HAVE_FLYVIEWER, false)

dnl *******************************************************************
dnl * List all makefiles configure must automatically generate.
dnl *******************************************************************

SIM_EXPAND_DIR_VARS

dnl * automake bugfix
test -d src              || mkdir src
test -d src/Inventor     || mkdir src/Inventor
test -d src/Inventor/Qt  || mkdir src/Inventor/Qt

AC_OUTPUT([
	soqt-config
	Makefile
	src/Inventor/Qt/Makefile
	src/Inventor/Qt/common/Makefile
	src/Inventor/Qt/devices/Makefile
	src/Inventor/Qt/viewers/Makefile
	src/Inventor/Qt/widgets/Makefile
	test-code/Makefile
	test-code/widgets/Makefile
	examples/Makefile
	examples/components/Makefile
	examples/nodes/Makefile
],[
	chmod a+x soqt-config
])

echo ""
echo "Now, run 'make install' to build and install SoQt..."
echo ""

dnl ************************************************************************
