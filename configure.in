# **************************************************************************
# SoQt/configure.in

AC_INIT(src/Inventor/Qt/SoQt.h)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
# Make sure the given source repository is in sync with the master source
# repository.

SIM_AC_CVS_CHANGES([
  # the addition of the "data" module
  SIM_AC_CVS_CHANGE([
    cvs co SoQtData
  ], [test -d data/CVS])

  # the removal of the examples directory (now a separate SoGuiExamples module)
  SIM_AC_CVS_CHANGE([
    rm -rf examples
  ], [test ! -d examples])

  # the moving of "conf-macros" to "cfg/m4"
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co SoQtMacros
  ], [test ! -d conf-macros], [test -d cfg/m4/CVS])
])

SIM_AC_MSVC_SUPPORT

# **************************************************************************
# *******  MAKING RELEASES  ************************************************
# **************************************************************************
#
# Library versioning
# ==================
#
# When making releases, follow these rules:
#
#  * if there has been made any incompatible changes to the ABI¹:
#    SOQT_MAJOR_VERSION += 1, SOQT_MINOR_VERSION = 0,
#    SOQT_MICRO_VERSION = 0.
#
#    (If you don't know if the changes that have been made since last
#    release is binary incompatible with the last ABI, you shouldn't
#    be making releases.)
#
#  * if there has been made additions to the API², but the ABI
#    is still backwards compatible: SOQT_MAJOR_VERSION unchanged,
#    SOQT_MINOR_VERSION += 1, SOQT_MICRO_VERSION = 0.
#
#  * for bugfix releases and other changes which do not change the interface
#    at all, keep SOQT_MAJOR_VERSION and SOQT_MINOR_VERSION unchanged
#    and SOQT_MICRO_VERSION += 1.
#
# Note that our MAJOR.MINOR.MICRO versioning scheme differs somewhat from
# the idea of library versioning applied by Libtool. According to Libtool,
# libraries should be versioned according to a CURRENT.AGE.REVISION scheme.
# Here CURRENT is supposed to be increased by 1 each time the API changes,
# and AGE increased by 1 along with CURRENT each time the API changes in a
# way which keeps the ABI backwards compatible. If compatibility is broken,
# AGE is set to 0 (while CURRENT is still increased by 1). The REVISION
# number has the same semantics as our MICRO number.
#
# To cooperate in a painless way with Libtool, we choose to "convert" our
# MAJOR.MINOR.MICRO scheme to Libtool's idea of versioning like this:
#
#    * Libtool's CURRENT number is increased when our MAJOR number is
#      increased.
#
#    * Libtool's AGE number is always kept at 0 (i.e. we will never make
#      ABI compatible releases where we increase the MAJOR number).
#
#    * Libtool's REVISION number will be a combination of our MINOR and
#      MICRO number, like this: REVISION = MINOR * 100 + MICRO, so we get
#      a REVISION number monotonically increasing in the way we want.
#
#      Note that this little "simplification" has two important
#      ramifications: 1) we can't make more than 99 bugfix-releases of
#      the library unless a MINOR or MAJOR version increase has happened,
#      2) we need to keep a release history log to map from Libtool numbers
#      back to our "native" MACRO.MINOR.MICRO versioning, as Libtool encodes
#      the filename of the library with it's own CURRENT.AGE.REVISION scheme.
#      This way it'll still be easy for us to find out which version a
#      bugreport belongs to: we must tell the user to check out the full
#      filename of the library, then we can just look up the MAJOR.MINOR.MICRO
#      number from the release history log below.
#
#
# **************************************************************************
# CVS maintenance
# ===============
#
# When making a release from the HEAD branch, increase the MAJOR number
# and make a new branch as follows (from the HEAD):
#
#   $ cd [soqt_srcdir_HEADbranch]
#   $ cvs tag -b soqt-MAJOR-0
#
# (The explicit mention of "soqt" in the branch name is necessary
# because we also tag this name onto all included CVS modules.)
#
# Note that new releases from the HEAD branch should only happen when
# there has been incompatible interface changes.
#
#
# When adding new functionality while keeping backward ABI compatibility,
# increase the MINOR number and make a new branch as follows:
#
#   $ cd [soqt_srcdir_MAJORbranch]
#   $ cvs tag -b soqt-MAJOR-MINOR
#
# (Where MINOR>0 always).
#
#
# Bugfix releases should be handled by setting a tag on the
# soqt-MAJOR-MINOR with the latest MAJOR.MINOR.x release,
# like this:
#
#   $ cd [soqt_srcdir_MAJORMINORbranch]
#   $ cvs tag soqt-MAJOR-MINOR-MICRO
#
# (Where MICRO>0 always).
#
# **************************************************************************
# Distribution binaries
# =====================
#
#  * MSWindows SDK: this is constructed as a self-extracting InstallShield
#    package. Run ``configure'' and ``make install'' on an MSWin-box with
#    the correct setup (latest Cygwin, MSVC++ v6.0 and InstallShield Express
#    v2.12), then execute
#
#         $ cd [soqt_builddir]/build
#         $ make ispkg
#
#    (Installshield's IsxBuild.exe need to be in your path.)
#
#    A self-extracting executable SETUPEX.EXE with the InstallShield install
#    should then be available under [soqt_builddir]/build/soqt/. Move
#    to <ftp://ftp.sim.no/pub/coin/bin/win32/soqt-@SOQT_VERSION@.exe>.
#
#  * RPM packages: follow the instructions at the top of the
#    build/soqt.spec.in file, make one package for each major platform
#    version we have access to (RedHat v5, v6, v7, Mandrake?, SuSE, etc)
#    for the architectures we want (i386, ...). Place packages under
#    <ftp://ftp.sim.no/pub/coin/bin/[platform]/[arch]/>.
#
# **************************************************************************
# Release history
# ===============
#
# Release version     | Libtool version   |                 |
# (MAJOR.MINOR.MICRO) | (CURRENT.AGE.REV) | CVS Branch name | Tag name
# --------------------+-------------------+-----------------+-----------------
#     0.9.99          |     0.0.999       |      HEAD       | soqt-0-9-99
#
#
# **************************************************************************
# Footnotes
# =========
#
# ¹ Application Binary Interface. This covers any publicly exposed
#   functions, function signatures, structures (and classes for C++
#   code). If any functions has been removed or changed, or if any
#   structures/classes has been modified in any way, the ABI has
#   most likely been made incompatible with earlier releases.
#
# ² Application Programmer's Interface. This is the functions and data
#   structures/classes exposed to the application programmer for
#   interaction with the library.
#
# **************************************************************************

SOQT_MAJOR_VERSION=0
SOQT_MINOR_VERSION=9
SOQT_MICRO_VERSION=99
SOQT_VERSION=$SOQT_MAJOR_VERSION.$SOQT_MINOR_VERSION.$SOQT_MICRO_VERSION
VERSION=$SOQT_VERSION

AC_SUBST(SOQT_MAJOR_VERSION)
AC_SUBST(SOQT_MINOR_VERSION)
AC_SUBST(SOQT_MICRO_VERSION)
AC_SUBST(SOQT_VERSION)

# Libtool versioning
LT_CURRENT=$SOQT_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $SOQT_MINOR_VERSION \* 100 + $SOQT_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


AC_DEFINE_UNQUOTED(SOQT_MAJOR_VERSION, $SOQT_MAJOR_VERSION,
  [Define to the major version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MINOR_VERSION, $SOQT_MINOR_VERSION,
  [Define to the minor version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_MICRO_VERSION, $SOQT_MICRO_VERSION,
  [Define to the micro version of SoQt])
AC_DEFINE_UNQUOTED(SOQT_VERSION, "$SOQT_VERSION",
  [Version string for SoQt])

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libSoQt, $VERSION)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Default to not building a static library.
# Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

# Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

# These are used for constructing the soqt-config file.
SOQT_EXTRA_CPPFLAGS=$CPPFLAGS
SOQT_EXTRA_LDFLAGS=$LDFLAGS
SOQT_EXTRA_LIBS=$LIBS
AC_SUBST(SOQT_EXTRA_CPPFLAGS)
AC_SUBST(SOQT_EXTRA_LDFLAGS)
AC_SUBST(SOQT_EXTRA_LIBS)

# **************************************************************************
# Use C++ compiler for configure tests.

AC_LANG_CPLUSPLUS
AC_PROG_CXX

# **************************************************************************
# Header files we might want.

AC_CHECK_HEADERS([windows.h unistd.h sys/types.h sys/time.h X11/extensions/SGIMisc.h X11/Xproto.h X11/extensions/XInput.h netinet/in.h])

# **************************************************************************
# Search and set up necessary stuff to use Open Inventor or Coin.

## Run AC_PATH_XTRA outside the if-then-else-fi, as a workaround for
## an Autoconf bug (AC_PATH_XTRA AC_REQUIREs AC_PATH_X, which means
## AC_PATH_X will only get expanded on the first AC_PATH_XTRA, which
## means trouble when AC_PATH_XTRA uses $no_x="yes"? from AC_PATH_X
## to decide whether or not to define X_DISPLAY_MISSING on X11-less
## systems).
##
## The bug has been reported to the Autoconf mailinglist on 20001122
## by mortene.
AC_PATH_XTRA

# $with_inventor is from within SIM_AC_HAVE_INVENTOR_IFELSE, and can
# be used here since the value is empty when it reaches this point
# unless it has been explicitly set.

if test x"$with_inventor" = xyes; then
  # For Open Inventor linkage, we need to check for a shitload of libraries.

  SIM_AC_CHECK_DL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_dl_libs $SOQT_EXTRA_LIBS"
  ])

  SIM_AC_CHECK_X11([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
  ])

  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_AC_CHECK_X11SHMEM(SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS")
    SIM_AC_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
    SIM_AC_CHECK_X11XID(SOQT_EXTRA_LIBS="$sim_ac_x11xid_libs $SOQT_EXTRA_LIBS")
  fi

  SIM_AC_CHECK_OPENGL([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_gl_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs an OpenGL-compatible development system installation))

  SIM_AC_CHECK_GLU([
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_glu_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(needs the OpenGL utility library))

  SIM_AC_HAVE_INVENTOR_IFELSE(
    [CPPFLAGS="$sim_ac_inventor_cppflags $CPPFLAGS"
     LDFLAGS="$sim_ac_inventor_ldflags $LDFLAGS"
     LIBS="$sim_ac_inventor_libs $LIBS"
     SOQT_EXTRA_CPPFLAGS="$sim_ac_inventor_cppflags $SOQT_EXTRA_CPPFLAGS"
     SOQT_EXTRA_LDFLAGS="$sim_ac_inventor_ldflags $SOQT_EXTRA_LDFLAGS"
     SOQT_EXTRA_LIBS="$sim_ac_inventor_libs $SOQT_EXTRA_LIBS"],
    AC_MSG_ERROR(couldn't compile and link against Open Inventor))

  sim_ac_brand_inventor="SGI/TGS Inventor"
else
  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
    SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
    SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
    SOQT_EXTRA_LIBS="$sim_ac_coin_libs $SOQT_EXTRA_LIBS"
  ], AC_MSG_ERROR(couldn't compile and link against Coin))

  SIM_AC_CHECK_X11_READY(
    [sim_ac_x11_ready=true],
    [sim_ac_x11_ready=false])

  if ! $sim_ac_x11_ready; then
    SIM_AC_CHECK_X11([
      CPPFLAGS="$CPPFLAGS $sim_ac_x11_cppflags"
      LDFLAGS="$LDFLAGS $sim_ac_x11_ldflags"
      LIBS="$sim_ac_x11_libs $LIBS"
      SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
      SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
      SOQT_EXTRA_LIBS="$sim_ac_x11_libs $SOQT_EXTRA_LIBS"
    ])
    # FIXME: we just implicitly assume that -lXext and -lXmu is available
    # if -lX11 is available from coin-config. Should really have macros
    # SIM_AC_CHECK_[X11SHMEM|X11MU]_READY. 20001116 mortene.
    if test x"$sim_ac_x11_avail" = xyes; then
      SIM_AC_CHECK_X11SHMEM([
        # LIBS="$sim_ac_x11shmem_libs $LIBS"
        SOQT_EXTRA_LIBS="$sim_ac_x11shmem_libs $SOQT_EXTRA_LIBS"
      ])
      SIM_AC_CHECK_X11MU([
        # LIBS="$sim_ac_x11mu_libs $LIBS"
        SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS"
      ])
    fi
  fi
  SIM_AC_CHECK_X11XID([
	SOQT_EXTRA_LIBS="$sim_ac_x11xid_libs $SOQT_EXTRA_LIBS"
  ])
  sim_ac_brand_inventor="Coin"
fi

# Check for the availability of this node (it is used in the hidden
# line rendering), which is not part of older Inventor implementations.
SIM_AC_HAVE_INVENTOR_NODE(SoPolygonOffset)

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoKeyboardEvent::DELETE enum],
  [#include <Inventor/events/SoKeyboardEvent.h>], [
   /* This is either DELETE or KEY_DELETE */
   SoKeyboardEvent::Key key = SoKeyboardEvent::DELETE;],
  [HAVE_SOKEYBOARDEVENT_DELETE])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoMouseButtonEvent::BUTTON5 enum],
  [#include <Inventor/events/SoMouseButtonEvent.h>], [
   /* mouse wheel support needs BUTTON4 and BUTTON5 */
   SoMouseButtonEvent::Button button = SoMouseButtonEvent::BUTTON5;],
  [HAVE_SOMOUSEBUTTONEVENT_BUTTON5])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoCamera::setStereoMode() method],
  [#include <Inventor/nodes/SoPerspectiveCamera.h>], [
   /* SoCamera is abstract, so test with SoPerspectiveCamera */
   SoPerspectiveCamera * c = new SoPerspectiveCamera;
   c->setStereoMode(SoCamera::MONOSCOPIC);],
  [HAVE_SOCAMERA_SETSTEREOMODE])

# **************************************************************************
# Check that the Qt installation looks ok and include the
# necessary paths and link libraries.

SIM_AC_CHECK_QT([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qt_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qt_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qt_libs $SOQT_EXTRA_LIBS"
  CPPFLAGS="$CPPFLAGS $sim_ac_qt_cppflags"
  LDFLAGS="$LDFLAGS $sim_ac_qt_ldflags"
  LIBS="$sim_ac_qt_libs $LIBS"
], AC_MSG_ERROR(can't compile and link against Qt development kit))

if test x"$sim_ac_x11mu_avail" != xyes; then
  SIM_AC_CHECK_X11MU(SOQT_EXTRA_LIBS="$sim_ac_x11mu_libs $SOQT_EXTRA_LIBS")
fi

SIM_AC_CHECK_QGL([
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS $sim_ac_qgl_cppflags"
  SOQT_EXTRA_LDFLAGS="$SOQT_EXTRA_LDFLAGS $sim_ac_qgl_ldflags"
  SOQT_EXTRA_LIBS="$sim_ac_qgl_libs $SOQT_EXTRA_LIBS"
], AC_MSG_ERROR(can't compile and link against the QGL extension library))

SIM_AC_QGLFORMAT_EQ_OP
SIM_AC_QGLFORMAT_SETOVERLAY
SIM_AC_QGLWIDGET_SETAUTOBUFFERSWAP

# Qt's moc wants Windows-style paths, so if the inputfile is an
# absolute Cygwin-style path it needs conversion.
AC_PATH_PROG(UNIX2WINPATH, cygpath, false)
if test x"$UNIX2WINPATH" = x"false"; then
  UNIX2WINPATH="echo"
else
  UNIX2WINPATH="$UNIX2WINPATH -w"
fi

# **************************************************************************
# Spaceball support through Linux Joystick driver

SIM_AC_CHECK_JOYSTICK_LINUX([
  AC_DEFINE(HAVE_JOYSTICK_LINUX, ,
    [Define to enable Linux Joystick driver support])
  AC_DEFINE_UNQUOTED(SOXT_LINUX_JOYSTICK_DEVICE,
    "$sim_ac_joystick_linux_device",
    [Define this to device handle to fallback on])
])
AM_CONDITIONAL(HAVE_JOYSTICK_LINUX, $sim_ac_joystick_linux_avail)

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG(
  [CPPFLAGS="$CPPFLAGS -DSOQT_DEBUG=1"],
  [CPPFLAGS="$CPPFLAGS -DSOQT_DEBUG=0"])

SIM_AC_CHECK_VAR_FUNCTIONNAME

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

SIM_AC_SOGUI_STATIC_DEFAULTS

# **************************************************************************
# Variable substitutions for using libSoQt in the generic code.

GUI=QT
Gui=Qt
gui=qt
WIDGET="QWidget *"
EVENT="QEvent *"
COMPONENTHEADER="Q_OBJECT"

AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(GUI)
AC_SUBST(WIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

# **************************************************************************
# Misc set-up.

SIM_EXPAND_DIR_VARS

# **************************************************************************
# Section for Doxygen

AC_ARG_WITH(
  html,
  AC_HELP_STRING([--with-html], [build and install SoQt HTML documentation]),
  [case "${withval}" in
    yes) want_html=yes ;;
    no)  want_html=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-html) ;;
  esac],
  [want_html=no])

AC_ARG_WITH(
  man,
  AC_HELP_STRING([--with-man], [build and install SoQt man pages]),
  [case "${withval}" in
    yes) want_man=yes ;;
    no)  want_man=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-man) ;;
  esac],
  [want_man=no])

SOQT_DOC_HTML=`echo $want_html | tr a-z A-Z`
SOQT_DOC_MAN=`echo $want_man | tr a-z A-Z`
AC_SUBST(SOQT_DOC_HTML)
AC_SUBST(SOQT_DOC_MAN)

soqt_dox_build_dir=`pwd`
soqt_dox_src_dir=`cd $srcdir; pwd`

AC_SUBST(soqt_dox_src_dir)
AC_SUBST(soqt_dox_build_dir)

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL(,
    AC_MSG_ERROR(Could not find the doxygen tool -- see http://www.stack.nl/~d
imitri/doxygen/))
  sim_ac_doxygen_our_version=1.1.5
  if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
    AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
  AC_SUBST(sim_ac_perl_exe)
fi

# **************************************************************************
# Remove redundant options from certain option lists.

SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_CPPFLAGS, -I$includedir $SOQT_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_LDFLAGS, -L$libdir $SOQT_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(SOQT_EXTRA_LIBS, $SOQT_EXTRA_LIBS)

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# **************************************************************************
# Remaining setup based on platform.

if $BUILD_WITH_MSVC; then
  CPPFLAGS="-DSOQT_MAKE_DLL $CPPFLAGS"

  # We use a version suffix on the .dll-file, so several incompatible
  # (major) versions can be installed on a system.
  #
  # BTW, when linking DLLs, the 3rd-party .lib files will be
  # linked into the .dll file. I believe it is still advisable to
  # list all libs used upon `soqt-config --libs`, as we can then
  # also use them from "parent" code (remember that their interfaces
  # is not exposed from the DLL) without any fuss.
  SOQT_EXTRA_CPPFLAGS="$SOQT_EXTRA_CPPFLAGS -DSOQT_DLL"
  SOQT_EXTRA_LIBS="-lsoqt$SOQT_MAJOR_VERSION $SOQT_EXTRA_LIBS"

else
  SOQT_EXTRA_LIBS="-lSoQt $SOQT_EXTRA_LIBS"

  # For the build/soqt.spec RPM specification file.
  SIM_AC_ISO8601_DATE(soqt_configure_date)
  AC_SUBST(soqt_configure_date)
fi

# **************************************************************************
# Submodules that needs to be configured...

AC_CONFIG_SUBDIRS(data)

# **************************************************************************
# List all files configure shall automatically generate.

AC_OUTPUT([
	soqt-config
	Makefile
	src/Inventor/Qt/Makefile
	src/Inventor/Qt/devices/Makefile
	src/Inventor/Qt/viewers/Makefile
	src/Inventor/Qt/widgets/Makefile
	build/Makefile
	build/soqt.doxygen
        build/soqt.spec
],[
	chmod a+x soqt-config
])

if test -d ${srcdir}/examples; then
  cat <<EOF

  ATTENTION:  You can remove the 'examples' directory from So$Gui.  It has
  been obsoleted by the stand-alone module 'SoGuiExamples'.
EOF
fi

sim_ac_sogui_static_defaults=No
$sim_ac_static_defaults && sim_ac_sogui_static_defaults=Yes

echo ""
echo "So$Gui configuration:"
echo "  Open Inventor Brand:  $sim_ac_brand_inventor"
echo "  Static Materials:     $sim_ac_sogui_static_defaults"
echo "  Install Prefix:       $prefix"
echo ""
echo "Now, run 'make install' to build and install So$Gui..."
echo ""

# **************************************************************************
