=====================================================================
NOTE: see also src/Inventor/Qt/common/BUGS.txt.
=====================================================================

000 Adding an app-specific pushbutton to the SoQtExaminerViewer will
    make the left border too thin. Reproduce with this code:

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <qpushbutton.h>
    
    
    int
    main(int argc,  char ** argv)
    {
      QWidget * window = SoQt::init("");
    
      SoQtExaminerViewer * examinerviewer = new SoQtExaminerViewer(window);
      examinerviewer->setSceneGraph(new SoCone);
    
      QWidget * parent = examinerviewer->getAppPushButtonParent();
      QPushButton * button = new QPushButton(parent);
      examinerviewer->addAppPushButton(button);
    
      examinerviewer->show();
      SoQt::show(window);
      SoQt::mainLoop();
    
      delete examinerviewer;
      return 0;
    } 
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    I see at least two problems in the SoQtFullViewer::buildLeftTrim()
    code: 1) it is always set to a fixed width of 30 pixels, 2) it is
    not size-updated when buttons are added.

=====================================================================

002 The following example demonstrates a bug with how the Qt widgets
    seems to be stacked when we call SoQtComponent::show():

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <Inventor/nodes/SoSeparator.h>
    #include <qapplication.h>
    #include <qwidget.h>
    
    
    class NewViewer : public SoQtViewer {
    public:
      NewViewer(QWidget * parent)
        : SoQtViewer(parent, "buh", FALSE, SoQtViewer::BROWSER, FALSE)
      {
        QWidget * widget = this->buildWidget(parent);
        this->setBaseWidget(widget);
    
        SoSeparator * root = new SoSeparator;
        root->addChild(new SoCone);
        this->setSceneGraph(root);
    
        // FIXME: this causes the bug, remove the next line and all is
        // well. 20020619 mortene.
        this->show();
      }
    };
    
    int
    main(int argc, char ** argv)
    {
      QWidget * qw = SoQt::init(argv[0]);
      NewViewer * svapp = new NewViewer(qw);
      SoQt::show(qw);
      SoQt::mainLoop();
      return 0;
    }
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    20020619 mortene.

=====================================================================

003 Animations that are continually triggered by timer-sensors are not
    running as smooth in Coin's viewers as with SGI Inventor. This
    makes it looks like Coin has worse rendering performance than SGI
    Inventor.

    It also looks like we have the same problem in SoXt.

    Part of the problem, at least, seems to be that it is possible to
    get several actualRedraw() calls in-between the handling of native
    Qt events. That causes for instance SoQtExaminerViewer's
    invocations of spin() to happen more seldom than actualRedraw(),
    which again causes bad responsiveness.

    This is not a trivial task.

    mortene 20020702.

=====================================================================

004 When turning on decorations (use the RMB popup-menu to do this)
    with a small viewer window, the decorations layout will initially
    be erroneous. Just a small interactive resize in any direction
    will automatically correct the layout again.

    Found by kintel. Looks like a Qt bug. Very low priority on fixing
    this one, as it's just a very small blemish in a boundary-kind-of
    condition anyway.

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <qwidget.h>
    
    int
    main(int argc, char ** argv)
    {
      QWidget * window = SoQt::init(argv[0]);
    
      SoQtExaminerViewer * viewer = new SoQtExaminerViewer(window);
      viewer->setSceneGraph(new SoCone);
      viewer->setDecoration(FALSE);
    
      viewer->show();
      SoQt::show(window);
    
      window->resize(100, 100);
    
      SoQt::mainLoop();
    
      delete viewer;
      return 0;
    }
    
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    mortene 20020703.

=====================================================================

005 Using SoQtComponent::setSize() to set a smaller size than the
    default _after_ doing either SoQtExaminerViewer::show() or
    SoQt::show(SoQtExaminerViewer*) fails, at least for an
    SoQtExaminerViewer embedded in a top-level shell (like in the
    SoGuiExamples/components/examinerviewer example.

    The interior resizes correctly (?), but the exterior does not
    shrink to fit.

    mortene 20020808.

=====================================================================

006 SoQtFlyViewer CTRL-modus can get sticky. To reproduce, hold down
    CTRL, move mouse cursor outside canvas/window, release CTRL, move
    cursor back into the canvas. Now it seems impossible to get rid of
    the CTRL-mode.

    The SoQtFlyViewer event handling generally seems a little
    bug-prone. Should make SoGuiFlyViewer::processSoEvent() adapt the
    strategy in for instance the ExaminerViewer, where we just check
    the state of everything (modifier keys, mousebuttons, ...) and set
    mode from that, instead of changing modes directly caused by user
    actions.

    20020923 mortene.

=====================================================================

007 We have a problem report from Radu Ursu on coin-discuss on using
    SoQt with a static Qt library, built with Microsoft Visual C++ v7:
    if Qt is added to the link-line for the final executable, it seems
    like two different Qt-instances are used. If not, there's a lot of
    complaints about missing symbols.

    Investigate with VC6 and see if it's the same there. If not, try
    to resolve when we install VC7.

    mortene 20020926.

=====================================================================

008 For somewhat larger scenes, the vertical tilt of the So*FlyViewer
    during motion doesn't work like in SGI's InventorXt -- actually,
    it hardly works at all.

    Bug reported by Ron Summers.

    20020923 mortene.

    UPDATE 20021014 mortene: I'm not able to reproduce this
    bug. Strange, as I'm sure I could easily reproduce it when it was
    reported, and I don't think anything has been done with the
    FlyViewer since. Summers has been contacted to get an exact
    description of how the problem can be reproduced.

=====================================================================

009 Michael Wimmer reported that using SoQt on top of SGI Inventor
    causes one particular scene he had to run veeeeeery slow, both
    compared to SoQt-on-Coin and InventorXt-on-Inventor.

    The scene consists of some very simple geometry and 11
    textures. The textures are in total shared > 1000 times in the
    scene, though.

    (I could reproduce the problem with Wimmer's example model file,
    but it was too large (lots if inlined textures) to cut down on and
    include here.)

    It seems likely that the bad rendering performance is caused by
    continuous re-construction and re-destruction of GL texture
    objects. According to pederb, SGI Inventor has a bug here which
    has since been fixed by TGS.

    Should a) construct a scene which reproduces the problem, b)
    investigate how we set up cache context IDs for the
    SoGLRenderAction instance in SoQt and determine what causes SGI
    Inventor to completely flip out, c) try to find a work-around.

    20021002 mortene.

=====================================================================

010 Acceleration and movement in SoQtFlyViewer differs on several
    aspects when compared to the behavior displayed by InventorXT:
    
    - The vertical tilt of So*FlyViewer behaves opposite of that of
      InventorXT (up/down swapped).

    - InventorXT don't have reverse. Instead, the user is able to
      change view-orientation with without changing position (This
      'feels more right' for me).
      
    - The InventorXT viewer stops moving instantly when the speed is
      zero. Our So*FLyViewer seems to be 'hanging behind', and then
      stop moving after a short time-interval (This is not a
      deceleration, but a delayed instant stop. It feels awkward).

    20021014 rolvs.

=====================================================================


