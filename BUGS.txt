=====================================================================
NOTE: see also src/Inventor/Qt/common/BUGS.txt.
=====================================================================

000 Adding an app-specific pushbutton to the SoQtExaminerViewer will
    make the left border too thin. Reproduce with this code:

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <qpushbutton.h>
    
    
    int
    main(int argc,  char ** argv)
    {
      QWidget * window = SoQt::init("");
    
      SoQtExaminerViewer * examinerviewer = new SoQtExaminerViewer(window);
      examinerviewer->setSceneGraph(new SoCone);
    
      QWidget * parent = examinerviewer->getAppPushButtonParent();
      QPushButton * button = new QPushButton(parent);
      examinerviewer->addAppPushButton(button);
    
      examinerviewer->show();
      SoQt::show(window);
      SoQt::mainLoop();
    
      delete examinerviewer;
      return 0;
    } 
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    I see at least two problems in the SoQtFullViewer::buildLeftTrim()
    code: 1) it is always set to a fixed width of 30 pixels, 2) it is
    not size-updated when buttons are added.

=====================================================================

002 The following example demonstrates a bug with how the Qt widgets
    seems to be stacked when we call SoQtComponent::show():

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <Inventor/nodes/SoSeparator.h>
    #include <qapplication.h>
    #include <qwidget.h>
    
    
    class NewViewer : public SoQtViewer {
    public:
      NewViewer(QWidget * parent)
        : SoQtViewer(parent, "buh", FALSE, SoQtViewer::BROWSER, FALSE)
      {
        QWidget * widget = this->buildWidget(parent);
        this->setBaseWidget(widget);
    
        SoSeparator * root = new SoSeparator;
        root->addChild(new SoCone);
        this->setSceneGraph(root);
    
        // FIXME: this causes the bug, remove the next line and all is
        // well. 20020619 mortene.
        this->show();
      }
    };
    
    int
    main(int argc, char ** argv)
    {
      QWidget * qw = SoQt::init(argv[0]);
      NewViewer * svapp = new NewViewer(qw);
      SoQt::show(qw);
      SoQt::mainLoop();
      return 0;
    }
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    20020619 mortene.
    
    UPDATE: Not seeing the scene-graph displayed in the main window in
    the above example is actually correct behavior: Note the FALSE
    flag passed on for 'embed'. The fact that the scene-graph is
    displayed when removing 'this->show()' is the actual bug... :-) A
    quick check (SoQT/test_code/renderarea.cpp) shows that
    SoQtRenderArea does the correct thing when passed a FALSE: It is
    built outside of the application window. On the other hand, when
    the widget is passed 'TRUE' for 'embed', in the code displayed
    above, it works as expected. 20021023 rolvs

=====================================================================

003 Animations that are continually triggered by timer-sensors are not
    running as smooth in Coin's viewers as with SGI Inventor. This
    makes it looks like Coin has worse rendering performance than SGI
    Inventor.

    It also looks like we have the same problem in SoXt.

    Part of the problem, at least, seems to be that it is possible to
    get several actualRedraw() calls in-between the handling of native
    Qt events. That causes for instance SoQtExaminerViewer's
    invocations of spin() to happen more seldom than actualRedraw(),
    which again causes bad responsiveness.

    This is not a trivial task.

    mortene 20020702.

=====================================================================

004 When turning on decorations (use the RMB popup-menu to do this)
    with a small viewer window, the decorations layout will initially
    be erroneous. Just a small interactive resize in any direction
    will automatically correct the layout again.

    Found by kintel. Looks like a Qt bug. Very low priority on fixing
    this one, as it's just a very small blemish in a boundary-kind-of
    condition anyway.

    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <qwidget.h>
    
    int
    main(int argc, char ** argv)
    {
      QWidget * window = SoQt::init(argv[0]);
    
      SoQtExaminerViewer * viewer = new SoQtExaminerViewer(window);
      viewer->setSceneGraph(new SoCone);
      viewer->setDecoration(FALSE);
    
      viewer->show();
      SoQt::show(window);
    
      window->resize(100, 100);
    
      SoQt::mainLoop();
    
      delete viewer;
      return 0;
    }
    
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    mortene 20020703.

=====================================================================

005 Using SoQtComponent::setSize() to set a smaller size than the
    default _after_ doing either SoQtExaminerViewer::show() or
    SoQt::show(SoQtExaminerViewer*) fails, at least for an
    SoQtExaminerViewer embedded in a top-level shell (like in the
    SoGuiExamples/components/examinerviewer example.

    The interior resizes correctly (?), but the exterior does not
    shrink to fit.

    mortene 20020808.

=====================================================================

006 SoQtFlyViewer CTRL-modus can get sticky. To reproduce, hold down
    CTRL, move mouse cursor outside canvas/window, release CTRL, move
    cursor back into the canvas. Now it seems impossible to get rid of
    the CTRL-mode.

    The SoQtFlyViewer event handling generally seems a little
    bug-prone. Should make SoGuiFlyViewer::processSoEvent() adapt the
    strategy in for instance the ExaminerViewer, where we just check
    the state of everything (modifier keys, mousebuttons, ...) and set
    mode from that, instead of changing modes directly caused by user
    actions.

    20020923 mortene.

    UPDATE 20021017 rolvs: 'Like in a miracle, this bug seems to have
    dissapeared', or the description of how to reproduce the bug is
    buggy. The notes on the event-processing is still valid though.

=====================================================================

007 We have a problem report from Radu Ursu on coin-discuss on using
    SoQt with a static Qt library, built with Microsoft Visual C++ v7:
    if Qt is added to the link-line for the final executable, it seems
    like two different Qt-instances are used. If not, there's a lot of
    complaints about missing symbols.

    Investigate with VC6 and see if it's the same there. If not, try
    to resolve when we install VC7.

    mortene 20020926.

=====================================================================

008 For somewhat larger scenes, the vertical tilt of the So*FlyViewer
    during motion doesn't work like in SGI's InventorXt -- actually,
    it hardly works at all.

    Bug reported by Ron Summers.

    20020923 mortene.

    UPDATE 20021014 mortene: I'm not able to reproduce this
    bug. Strange, as I'm sure I could easily reproduce it when it was
    reported, and I don't think anything has been done with the
    FlyViewer since. Summers has been contacted to get an exact
    description of how the problem can be reproduced.

    UPDATE 20021016 rolvs: Here is what Ron Summers say about it:
    "Moving the cursor to the left or right causes a large velocity
    change in the corresponding direction. Moving the cursor up or
    down causes a very small velocity change."

    UPDATE 20021017 rolvs: This should be fixed now, please verify.
    
    UPDATE 20021021 rolvs: Not fixed after all.. :-/ There is some
    'magical scaling' going on in there that makes it behave
    differently for different sized scenes. Further investigation is
    needed to sort it out.

    UPDATE 20021022 rolvs: Fixed. Bug caused by a coupling of amount
    of pan and tilt with framerate. Now decoupled, and it feels the
    same independent of scene size (in #polygons).

=====================================================================

009 Michael Wimmer reported that using SoQt on top of SGI Inventor
    causes one particular scene he had to run veeeeeery slow, both
    compared to SoQt-on-Coin and InventorXt-on-Inventor.

    The scene consists of some very simple geometry and 11
    textures. The textures are in total shared > 1000 times in the
    scene, though.

    (I could reproduce the problem with Wimmer's example model file,
    but it was too large (lots if inlined textures) to cut down on and
    include here.)

    It seems likely that the bad rendering performance is caused by
    continuous re-construction and re-destruction of GL texture
    objects. According to pederb, SGI Inventor has a bug here which
    has since been fixed by TGS.

    Should a) construct a scene which reproduces the problem, b)
    investigate how we set up cache context IDs for the
    SoGLRenderAction instance in SoQt and determine what causes SGI
    Inventor to completely flip out, c) try to find a work-around.

    20021002 mortene.

=====================================================================

010 Acceleration and movement in SoQtFlyViewer differs on several
    aspects when compared to the behavior displayed by InventorXT:
    
    - The vertical tilt of So*FlyViewer behaves opposite of that of
      InventorXT (up/down swapped).

    - InventorXT don't have reverse. Instead, the user is able to
      change view-orientation with without changing position (This
      'feels more right' for me).
      
    - The InventorXT viewer stops moving instantly when the speed is
      zero. Our So*FLyViewer seems to be 'hanging behind', and then
      stop moving after a short time-interval (This is not a
      deceleration, but a delayed instant stop. It feels awkward).

    20021014 rolvs.
    
    UPDATE 20021016 rolvs: The 'hanging behind' behaviour is now
    fixed. But the way which speeds and rotations is calculated is
    still fishy (work-in-progress).

    UPDATE 20021017 rolvs: The inverted vertical tilt item is now
    fixed. Try out how it 'feels', and swap it back if the new
    behaviour feels awkward.

=====================================================================

011 There is something fishy about the up-vector in the So*FlyViewer.

    The up-vector doesn't seem to be "kept straight" at all
    times. I've been able to reproduce this occasionally by flying at
    high speed in a sharp curve towards either the left or right
    side.

    The up-vector should always stay the same, unless it is explicitly
    changed by the user when hitting 'u'. If the up-vector changes
    during flight, the FlyViewer gets more or less unusable.

    20021015 mortene.

    UPDATE 20021017 rolvs: This should be fixed now, please verify.

    UPDATE 20021021 rolvs: Tilt mode was still malfuncitioning. Fixed
    now.

=====================================================================

012 Error with SoQtExaminerViewer::getViewerTitle().

    A bug-report from Paul van Santen of Hitec-O:

         It seems that this method now returns an empty string, even
         though we have set the title in the class' constructor. Is
         this a bug or an intended code change?

    Not yet investigated, but sounds very likely to be a bug.

    After fixing, make sure the different possible "configurations" of
    an SoQtExaminerViewer component in a Qt component-ownership tree
    is tested to work: both SoQtExaminerViewer as a top-level window,
    and embedded in an application Qt widget.

    20021018 mortene.
    
    UPDATE: I've tried to recreate this bug by creating QMainWindow
    with an embedded ExaminerViewer, and fetching the title of the
    viewer after initialization. This does not demonstrate the
    erroneous behaviour, and the demo application is sent to Paul van
    Santen. Awaiting reply from him. 20021022 rolvs.

=====================================================================

013 Minor user-interaction bug with the SoQtExaminerViewer.

    The camera-interaction mode can "get stuck" in this manner: click
    and drag the model. While still holding the LMB, hit 'ESC' to
    switch to scenegraph-interaction mode. Let go of LMB. Hit 'ESC'
    again. You're now in "drag/examine"-mode even though you're not
    holding down the LMB.

    (Simple to work around for the user -- just hit 'ESC' twice -- but
    it's still an irritating bug.)

    This bug is very likely common for all the So@Gui@ toolkits.

    20021022 mortene.

=====================================================================

014 Viewers don't resize when the decorations isn't built. 

    When trying to construct any one of the *Fly*, *Examiner* and
    *PlaneViewers with either of the flags SoQtFullViewer::BUILD_NONE
    or SoQtFullViewer::BUILD_POPUP, the canvas fails to resize to any
    apropriate size (It displays sa a small window in the corner).
    
    Minimal example that demonstrates this: 
    
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---
    
    #include <Inventor/Qt/SoQt.h>
    #include <qapplication.h>

    #include <Inventor/Qt/SoQt.h>
    #include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
    #include <Inventor/nodes/SoCone.h>
    #include <qwidget.h>

    int main(int argc, char ** argv)
    {
        QWidget * window = SoQt::init(argc, argv, argv[0]);
  
        SoQtExaminerViewer * viewer = new SoQtExaminerViewer
            (window, "Examiner Viewer" ,TRUE,
            SoQtFullViewer::BUILD_NONE);

        viewer->setSceneGraph(new SoCone);
        viewer->show();

        SoQt::show(window);  
        window->resize(500, 500);
  
        SoQt::mainLoop();
        return 0;
    }
    ----8<--- [snip] ---------8<--- [snip] ---------8<--- [snip] ---

    On the other hand, if the viewer is built first /with/ decorations
    and then followed by a call to setDecoration( FALSE ) it works as
    expected. Then again, if the embed-flag is set to false on
    construction, it performs as expected. As it applies to all
    viewers, the source of this bug is probably found in
    SoQtFullViewer.

    First reported by Daniel Soto.

    20021022 rolvs
    
    UPDATE: Should be fixed now. Building the decorations, and then
    hiding them if they aren't needed makes this failure go away, as
    well as an assert-bailout reported by Tamer Fahmy. 20021022 rolvs

=====================================================================
    
